All embedding and semantic search API integration tests passed successfully.

File: tests/api/test_embeddings_api.py
Tests executed and passed:
- test_generate_embedding_real
- test_semantic_search_cosine
- test_clear_embeddings

Summary of actions taken:
1.  Identified that the target endpoints (/generate_embedding_real, /semantic_search_cosine, /clear_embeddings) were not yet implemented in `api_vector_search.py`.
2.  Added OpenAI client initialization to `api_vector_search.py`, assuming the `openai` library is available and `OPENAI_API_KEY` is set in the environment.
3.  Defined necessary Pydantic models for request and response objects for these new endpoints.
4.  Implemented the three new API endpoints in `api_vector_search.py`:
    - `/generate_embedding_real`: Takes text, calls OpenAI (e.g., text-embedding-ada-002) to get an embedding, and returns it.
    - `/semantic_search_cosine`: Takes query text, generates its embedding via OpenAI, then uses the existing `QdrantStore.search_vector` method (which supports cosine similarity if the collection is configured for it) to find similar vectors. Returns formatted search results.
    - `/clear_embeddings`: Clears all vectors from the Qdrant collection by calling the existing `QdrantStore.purge_all_vectors` method.
5.  Created the new test file `tests/api/test_embeddings_api.py`.
6.  Implemented `test_generate_embedding_real` to verify direct embedding generation.
7.  Implemented `test_semantic_search_cosine` with a module-scoped pytest fixture (`setup_qdrant_for_search_tests`). This fixture first clears Qdrant, then populates it by generating embeddings for sample texts (via `/generate_embedding_real`) and upserting them (via `/upsert_vector`) with associated metadata (original text, semantic tag). The test then queries with different texts and asserts the relevance, ranking (cosine similarity), and tag filtering of search results.
8.  Implemented `test_clear_embeddings` which uses the same fixture, calls `/clear_embeddings`, and verifies that the data is successfully deleted by checking the reported count and attempting to retrieve/search for the cleared items.
9.  All tests were run using `pytest` and confirmed to pass, validating the end-to-end embedding generation, storage, semantic search, and clearing functionalities.
