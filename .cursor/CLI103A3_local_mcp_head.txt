import sys
import json
import logging
import time
import inspect
# Ensure parent directory (ADK/agent_data) is in path if run directly
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import mcp

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Import necessary components using relative paths
try:
    from tools.echo_tool import echo
    from tools.save_text_tool import save_text
    from tools.add_numbers_tool import add_numbers
    from tools.get_registered_tools_tool import get_registered_tools
    from tools.register_tools import get_all_tool_functions # Use the new helper
except ImportError as e:
    logger.error(f"Failed to import tools using relative paths: {e}", exc_info=True)
    sys.exit(1)

# --- Tool Registration ---
# Use the helper function to get all available tools
# This dictionary holds {tool_name: function_object}
ALL_TOOLS = get_all_tool_functions()
logger.info(f"Discovered tools: {list(ALL_TOOLS.keys())}")

def run_mcp_loop():
    logger.info("MCP Stdio Server Started. Waiting for JSON input on stdin...")
    while True:
        line = sys.stdin.readline() # Read one line at a time
        if not line:
            # Handle EOF or empty line if desired. Currently, it breaks the loop.
            logger.info("Stdin stream ended or received empty line. Exiting loop.")
            break

        request = {}
        response = {}
        request_id = None
        start_time = time.time()

        try:
            request = json.loads(line)
            request_id = request.get("meta", {}).get("request_id")
            logger.debug(f"Received request (ID: {request_id}): {request}")
