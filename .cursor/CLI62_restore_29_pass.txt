- Pytest run (Qdrant check): Still 34 tests collected. Multiple failures. QDRANT_URL not set. Continuing to wait.
CLI62 - Restoration Log: Attempting to reach exactly 29 passing tests.
- Deleted tests/api/test_delete_vectors_api.py (post-CLI54 feature).
- Pytest run (Qdrant check): Still 34 tests collected. Multiple failures. QDRANT_URL not set. Continuing to wait.
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1440f6fe0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1440f6fe0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1440f6fe0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x166b6e840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x166b6f3c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x166b6f6c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x166b6f840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x1668870c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x166b6ff40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 9.12s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1079fe7d0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1079fe7d0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1079fe7d0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15f2e2840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x15f2e33c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15f2e36c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x15f2e3840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15f2870c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15f2e3f40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 7.42s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x10723e800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x10723e800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x10723e800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x127d6e840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x127d6f3c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x127d6f6c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x127d6f840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x127b870c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x127d6ff40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 8.02s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1221fe800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1221fe800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1221fe800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x16a1e2840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x16a1e33c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x16a1e36c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x16a1e3840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x16a1870c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x16a1e3f40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
=================== 19 failed, 6 passed, 9 errors in 10.87s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1424f7010>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1424f7010>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1424f7010>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15126e840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x15126f3c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15126f6c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x15126f840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15108b0c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15126ff40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 7.86s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x106e3e800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x106e3e800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x106e3e800>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x1367e2840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x1367e33c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x1367e36c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x1367e3840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x1367870c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x1367e3f40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 8.06s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1143fe650>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1143fe650>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1143fe650>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15d7e6840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x15d7e73c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15d7e76c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x15d7e7840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15d78b0c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x15d7e7f40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 9.07s ====================
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 34 items

test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector FAILED [  2%]
test_qdrant_store.py::TestQdrantStore::test_search_vector FAILED         [  5%]
test_qdrant_store.py::TestQdrantStore::test_upsert_vector FAILED         [  8%]
tests/api/test_embeddings_api.py::test_generate_embedding_real PASSED    [ 11%]
tests/api/test_embeddings_api.py::test_semantic_search_cosine ERROR      [ 14%]
tests/api/test_embeddings_api.py::test_clear_embeddings ERROR            [ 17%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes ERROR [ 20%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all ERROR [ 23%]
tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold ERROR [ 26%]
tests/api/test_query_vectors_api.py::test_get_vector_by_id FAILED        [ 29%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_tag FAILED    [ 32%]
tests/api/test_query_vectors_api.py::test_query_vectors_by_ids FAILED    [ 35%]
tests/api/test_update_vector_api.py::test_update_vector_success FAILED   [ 38%]
tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim FAILED [ 41%]
tests/api/test_update_vector_api.py::test_update_vector_empty_metadata FAILED [ 44%]
tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found FAILED [ 47%]
tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input FAILED [ 50%]
tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid FAILED [ 52%]
tests/api/test_vector_edge_cases.py::test_delete_vector_not_found FAILED [ 55%]
tests/api/test_vector_safety_check.py::test_vector_id_collision ERROR    [ 58%]
tests/api/test_vector_safety_check.py::test_vector_truncation_protection ERROR [ 61%]
tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success ERROR [ 64%]
tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match ERROR [ 67%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled FAILED [ 70%]
tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled FAILED [ 73%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled FAILED [ 76%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled FAILED [ 79%]
tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled FAILED [ 82%]
tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled FAILED [ 85%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_no_firestore PASSED [ 88%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_calls_upsert_vector_with_firestore PASSED [ 91%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_handles_upsert_vector_exception PASSED [ 94%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_integer_point_id PASSED [ 97%]
tests/unit/test_qdrant_store_update_vector.py::test_update_vector_string_point_id PASSED [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_semantic_search_cosine _________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
___________________ ERROR at setup of test_clear_embeddings ____________________

    @pytest.fixture(scope="module")
    def setup_qdrant_for_search_tests():
        """
        Fixture to ensure Qdrant is clean before running a module of search tests.
        This helps in maintaining test isolation if previous tests left data.
        It also populates Qdrant with some initial data for search tests.
        """
        # Clear all existing embeddings first to ensure a clean state
        clear_response = client.post("/clear_embeddings")
>       assert clear_response.status_code == 200, "Failed to clear Qdrant before search tests"
E       AssertionError: Failed to clear Qdrant before search tests
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_embeddings_api.py:70: AssertionError
________ ERROR at setup of test_query_vectors_by_score_threshold_passes ________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____ ERROR at setup of test_query_vectors_by_score_threshold_filters_all ______

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
_________ ERROR at setup of test_query_vectors_without_score_threshold _________

    @pytest.fixture(scope="module", autouse=True)
    def setup_test_vectors():
        # Clear existing test data first to ensure a clean state
        # This uses a tag specific to this test module to avoid conflicts
        test_module_tag = "test_score_threshold_module_data"

        # Generate unique integer IDs for test vectors, starting from a high number to avoid collision
        start_id = 9000
        vector_ids = [start_id + i for i in range(4)]

        vectors_to_insert = [
            create_vector_item(vector_ids[0], test_module_tag, "The study of stars and celestial bodies.", seed=1), # Higher relevance
            create_vector_item(vector_ids[1], test_module_tag, "Exploring galaxies and cosmic phenomena.", seed=2), # Medium-high relevance
            create_vector_item(vector_ids[2], test_module_tag, "Understanding planetary motion and orbits.", seed=3), # Medium relevance
            create_vector_item(vector_ids[3], test_module_tag, "A brief history of culinary arts.", seed=4) # Low relevance
        ]

        # Batch insert these vectors
        for vec_item in vectors_to_insert:
            upsert_payload = {
                "point_id": vec_item["id"],
                "vector": vec_item["vector"],
                "metadata": vec_item["metadata"]
            }
            response_insert = client.post("/upsert_vector", json=upsert_payload)
>           assert response_insert.status_code == 200, f"Upsert failed for {vec_item['id']}: {response_insert.text}"
E           AssertionError: Upsert failed for 9000: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vector_by_score_threshold.py:75: AssertionError
__________________ ERROR at setup of test_vector_id_collision __________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________ ERROR at setup of test_vector_truncation_protection ______________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        # Assuming /clear_embeddings is the correct endpoint to clear all data for a fresh test run.
        # This was previously /embeddings/clear in some examples, but /clear_embeddings seems more current.
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_safety_check.py:18: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________ ERROR at setup of test_query_by_multiple_tags_success _____________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________ ERROR at setup of test_query_by_tag_no_match _________________

    @pytest.fixture(scope="function", autouse=True)
    def clear_storage_before_after_test():
        """Fixture to clear embeddings before and after each test."""
        response = client.post("/clear_embeddings")
>       assert response.status_code == 200, "Failed to clear embeddings before test."
E       AssertionError: Failed to clear embeddings before test.
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_tag_filtering.py:15: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
=================================== FAILURES ===================================
________________ TestQdrantStore.test_delete_and_update_vector _________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_delete_and_update_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1097a67a0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_search_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_search_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1097a67a0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ TestQdrantStore.test_upsert_vector ______________________

self = <test_qdrant_store.TestQdrantStore testMethod=test_upsert_vector>

    def setUp(self):
>       self.store = QdrantStore()

test_qdrant_store.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <agent_data.vector_store.qdrant_store.QdrantStore object at 0x1097a67a0>
firestore_project_id = None, firestore_collection_name = None

    def __init__(self, firestore_project_id: Optional[str] = None, firestore_collection_name: Optional[str] = None):
        if hasattr(self, '_initialized') and self._initialized: # Prevent re-initialization
            if firestore_project_id and self.firestore_project_id != firestore_project_id:
                logger.warning(f"QdrantStore already initialized with {self.firestore_project_id}, ignoring new project {firestore_project_id} in re-init attempt.")
            if firestore_collection_name and self.firestore_collection_name != firestore_collection_name:
                logger.warning(f"QdrantStore already initialized with {self.firestore_collection_name}, ignoring new collection {firestore_collection_name} in re-init attempt.")
            return

        logger.info("Initializing QdrantStore...")
        qdrant_url = os.getenv("QDRANT_URL")
        api_key = os.getenv("QDRANT_API_KEY")

        if not qdrant_url:
            logger.error("QDRANT_URL environment variable not set.")
>           raise ValueError("QDRANT_URL must be set to initialize QdrantStore.")
E           ValueError: QDRANT_URL must be set to initialize QdrantStore.

agent_data/vector_store/qdrant_store.py:46: ValueError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________________ test_get_vector_by_id _____________________________

    def test_get_vector_by_id():
        """
        Tests retrieving a single vector by its point_id.
        """
        point_id = random.randint(1, 1000000)
        vector = create_random_vector()
        tag = generate_unique_tag()
        payload = {"tag": tag}

        # Upsert the vector
        upsert_response = client.post(
            "/upsert_vector",
            json={"point_id": point_id, "vector": vector, "metadata": payload},
        )
>       assert upsert_response.status_code == 200, f"Failed to upsert vector: {upsert_response.text}"
E       AssertionError: Failed to upsert vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:30: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_tag ___________________________

    def test_query_vectors_by_tag():
        """
        Tests querying vectors by a specific tag.
        """
        tag_to_query = generate_unique_tag()
        num_vectors_with_tag = random.randint(3, 5)
        points_to_upsert = []
        expected_point_ids = set()

        for i in range(num_vectors_with_tag):
            point_id = random.randint(1000001, 2000000) # Ensure different range from previous test
            vector = create_random_vector()
            item_metadata = {"tag": tag_to_query, "index": i}
            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_point_ids.add(point_id)

        # Add one more vector with a different tag to ensure filtering works
        decoy_tag = generate_unique_tag()
        decoy_point_id = random.randint(2000001, 3000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": decoy_tag}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 1584685: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:90: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_query_vectors_by_ids ___________________________

    def test_query_vectors_by_ids():
        """
        Tests querying multiple vectors by a list of point_ids.
        """
        num_vectors_to_query = random.randint(3, 5)
        points_to_upsert = []
        expected_points_data = {} # Store as {id: payload} for easy lookup
        point_ids_to_query = []

        for i in range(num_vectors_to_query):
            point_id = random.randint(3000001, 4000000) # New range for IDs
            vector = create_random_vector()
            tag = generate_unique_tag()
            item_metadata = {"tag": tag, "index": i}

            points_to_upsert.append({"id": point_id, "vector": vector, "metadata": item_metadata})
            expected_points_data[point_id] = item_metadata
            point_ids_to_query.append(point_id)

        # Add a decoy point that won't be queried
        decoy_point_id = random.randint(4000001, 5000000)
        points_to_upsert.append({
            "id": decoy_point_id,
            "vector": create_random_vector(),
            "metadata": {"tag": generate_unique_tag(), "decoy": True}
        })

        # Upsert the vectors
        for point_data in points_to_upsert:
            upsert_response = client.post(
                "/upsert_vector",
                json={"point_id": point_data["id"], "vector": point_data["vector"], "metadata": point_data["metadata"]},
            )
>           assert upsert_response.status_code == 200, f"Failed to upsert vector {point_data['id']}: {upsert_response.text}"
E           AssertionError: Failed to upsert vector 3118213: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E           assert 500 == 200
E            +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_query_vectors_api.py:151: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________________ test_update_vector_success __________________________

    def test_update_vector_success():
        # Generate a valid UUID for point_id
        point_id_uuid = str(uuid.uuid4())
        payload = {
            "point_id": point_id_uuid, # Use the generated UUID
            "new_vector": [0.0] * 1536,
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:16: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
____________________ test_update_vector_invalid_vector_dim _____________________

    def test_update_vector_invalid_vector_dim():
        payload = {
            "point_id": "test-id-002",
            "new_vector": [0.0] * 512,  # wrong dimension
            "new_metadata": {"tag": "unit_test"}
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:26: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
______________________ test_update_vector_empty_metadata _______________________

    def test_update_vector_empty_metadata():
        payload = {
            "point_id": "test-id-003",
            "new_vector": [0.0] * 1536,
            "new_metadata": {}  # invalid
        }
        response = client.post("/update_vector", json=payload)
>       assert response.status_code == 422
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_update_vector_api.py:35: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_get_vector_by_id_not_found ________________________

    def test_get_vector_by_id_not_found():
        """
        Tests retrieving a non-existent vector by ID.
        Expected behavior: 404 Not Found.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # Corrected: Use POST with JSON body
        response = client.post("/get_vector_by_id", json={"point_id": non_existent_point_id})

>       assert response.status_code == 404, \
            f"Expected status code 404 for non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 404 for non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:43: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_______________________ test_upsert_vector_invalid_input _______________________

    def test_upsert_vector_invalid_input():
        """
        Tests upserting a vector with invalid input (e.g., wrong vector dimension).
        Expected behavior: 422 Unprocessable Entity.
        """
        point_id = random.randint(1, 1000000)
        # Malformed vector: incorrect dimension
        malformed_vector = create_random_vector(dim=VECTOR_DIMENSION + 1)
        payload = {"tag": generate_unique_tag()}

        upsert_payload = {
            "points": [
                {"id": point_id, "vector": malformed_vector, "payload": payload}
            ]
        }

        response = client.post("/upsert_vector", json=upsert_payload)

>       assert response.status_code == 422, \
            f"Expected status code 422 for invalid input, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 422 for invalid input, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 422
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:74: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
__________________ test_query_vectors_by_ids_partial_invalid ___________________

    def test_query_vectors_by_ids_partial_invalid():
        """
        Tests querying by a list of IDs where some are valid and some are not.
        Expected behavior: 200 OK, returns only the valid vectors.
        """
        # 1. Insert one valid vector
        valid_point_id = random.randint(2000001, 3000000)
        valid_vector = create_random_vector()
        valid_tag = generate_unique_tag()
        valid_payload_metadata = {"tag": valid_tag, "description": "valid_point"} # Renamed for clarity, this is metadata

        # Corrected upsert payload for /upsert_vector (single item)
        # It expects point_id, vector, and metadata directly in the body.
        upsert_payload_corrected = {
            "point_id": valid_point_id,
            "vector": valid_vector,
            "metadata": valid_payload_metadata
        }

        upsert_response = client.post("/upsert_vector", json=upsert_payload_corrected)
>       assert upsert_response.status_code == 200, f"Failed to upsert valid vector: {upsert_response.text}"
E       AssertionError: Failed to upsert valid vector: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:120: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_________________________ test_delete_vector_not_found _________________________

    def test_delete_vector_not_found():
        """
        Tests attempting to delete a vector that doesn't exist.
        Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
        or 404 if the API layer specifically checks existence before trying to delete and returns 404.
        Based on current understanding of /delete_vector, it should be 200.
        """
        non_existent_point_id = random.randint(9000000, 9999999) # A high range unlikely to exist

        # The /delete_vector endpoint expects a JSON body like {"point_id": id_value}
        delete_payload = {"point_id": non_existent_point_id}
        response = client.post("/delete_vector", json=delete_payload)

        # Based on the current implementation of /delete_vector and QdrantStore.delete_vector,
        # deleting a non-existent ID returns a 200 OK with status "deleted".
>       assert response.status_code == 200, \
            f"Expected status code 200 for deleting non-existent ID, but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected status code 200 for deleting non-existent ID, but got 500. Response: {"detail":"Failed to initialize QdrantStore: QDRANT_URL must be set to initialize QdrantStore."}
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/api/test_vector_edge_cases.py:180: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    agent_data.vector_store.qdrant_store:qdrant_store.py:45 QDRANT_URL environment variable not set.
_____________________ test_upsert_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x14a0e2840>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:73: TypeError
____________________ test_upsert_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x14a0e33c0>

    @pytest.mark.asyncio
    async def test_upsert_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:80: TypeError
_____________________ test_delete_vector_with_sync_enabled _____________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x14a0e36c0>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, _, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:95: TypeError
____________________ test_delete_vector_with_sync_disabled _____________________

qdrant_store_with_sync_disabled = <async_generator object qdrant_store_with_sync_disabled at 0x14a0e3840>

    @pytest.mark.asyncio
    async def test_delete_vector_with_sync_disabled(qdrant_store_with_sync_disabled):
>       store, _ = await qdrant_store_with_sync_disabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:102: TypeError
_________________ test_delete_vectors_by_tag_with_sync_enabled _________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x14a0870c0>

    @pytest.mark.asyncio
    async def test_delete_vectors_by_tag_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:109: TypeError
___________________ test_purge_all_vectors_with_sync_enabled ___________________

qdrant_store_with_sync_enabled = <async_generator object qdrant_store_with_sync_enabled at 0x14a0e3f40>

    @pytest.mark.asyncio
    async def test_purge_all_vectors_with_sync_enabled(qdrant_store_with_sync_enabled):
>       store, qdrant_client_mock, firestore_manager = await qdrant_store_with_sync_enabled
E       TypeError: object async_generator can't be used in 'await' expression

tests/unit/test_qdrant_store_firestore_sync.py:139: TypeError
=========================== short test summary info ============================
FAILED test_qdrant_store.py::TestQdrantStore::test_delete_and_update_vector
FAILED test_qdrant_store.py::TestQdrantStore::test_search_vector - ValueError...
FAILED test_qdrant_store.py::TestQdrantStore::test_upsert_vector - ValueError...
FAILED tests/api/test_query_vectors_api.py::test_get_vector_by_id - Assertion...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_tag - Asser...
FAILED tests/api/test_query_vectors_api.py::test_query_vectors_by_ids - Asser...
FAILED tests/api/test_update_vector_api.py::test_update_vector_success - asse...
FAILED tests/api/test_update_vector_api.py::test_update_vector_invalid_vector_dim
FAILED tests/api/test_update_vector_api.py::test_update_vector_empty_metadata
FAILED tests/api/test_vector_edge_cases.py::test_get_vector_by_id_not_found
FAILED tests/api/test_vector_edge_cases.py::test_upsert_vector_invalid_input
FAILED tests/api/test_vector_edge_cases.py::test_query_vectors_by_ids_partial_invalid
FAILED tests/api/test_vector_edge_cases.py::test_delete_vector_not_found - As...
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_upsert_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vector_with_sync_disabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_delete_vectors_by_tag_with_sync_enabled
FAILED tests/unit/test_qdrant_store_firestore_sync.py::test_purge_all_vectors_with_sync_enabled
ERROR tests/api/test_embeddings_api.py::test_semantic_search_cosine - Asserti...
ERROR tests/api/test_embeddings_api.py::test_clear_embeddings - AssertionErro...
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_passes
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_by_score_threshold_filters_all
ERROR tests/api/test_query_vector_by_score_threshold.py::test_query_vectors_without_score_threshold
ERROR tests/api/test_vector_safety_check.py::test_vector_id_collision - Asser...
ERROR tests/api/test_vector_safety_check.py::test_vector_truncation_protection
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_multiple_tags_success
ERROR tests/api/test_vector_tag_filtering.py::test_query_by_tag_no_match - As...
==================== 19 failed, 6 passed, 9 errors in 8.05s ====================
