/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... 
----------------------------- live log collection ------------------------------
DEBUG    faiss.loader:loader.py:89 Environment variable FAISS_OPT_LEVEL is not set, so let's pick the instruction set according to the current CPU
INFO     faiss.loader:loader.py:148 Loading faiss.
INFO     faiss.loader:loader.py:150 Successfully loaded faiss.
INFO     faiss:__init__.py:174 Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
collected 8 items

ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_auto_embed 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.register_tools:register_tools.py:5 sys.path in Cloud Run at top of register_tools.py: ['/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tests/tools', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python310.zip', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages']
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:20 OpenAI import successful.
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:45 FAISS import successful.
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:73 OpenAI client initialized successfully via external registry.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:81 vector_data not provided for index 'test_index'. Attempting to generate embeddings.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:95 Generating embeddings for 2 documents using field 'text'. Expected dimension: 10.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc1' (text: 'Hello world...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc1'.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc2' (text: 'Another document...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc2'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:152 Successfully generated 2 embeddings from 2 documents (out of 2 originally).
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_index' with 2 metadata entries and 2 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:184 vector_data is a list. Proceeding with list of vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 2 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (2) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 2 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 2 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains <MagicMock name='IndexFlatL2().ntotal' id='4607058240'> vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_index in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_index
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_index.faiss to gs://test-bucket/test_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_index.meta to gs://test-bucket/test_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_index' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_index' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_index' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_index.meta
FAILED                                                                   [ 12%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_with_vector_data 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_index_vector' with 2 metadata entries and 2 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:163 vector_data is a dict. Extracting values as vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 2 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (2) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 2 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 2 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains <MagicMock name='IndexFlatL2().ntotal' id='4607849856'> vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_index_vector.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_index_vector.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_index_vector in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_index_vector
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_index_vector.faiss to gs://test-bucket/test_index_vector.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_index_vector.meta to gs://test-bucket/test_index_vector.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_index_vector' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_index_vector' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_index_vector' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_index_vector.meta
FAILED                                                                   [ 25%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_completed 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: {'index_name': 'test_load'} in collection 'faiss_indexes_registry'
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:74 Firestore data for '{'index_name': 'test_load'}': vectorStatus=completed, gcs_meta_path=gs://test-bucket/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:91 Firestore status check passed for index '{'index_name': 'test_load'}'. Using gcs_meta_path: gs://test-bucket/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:110 Attempting GCS download using path from Firestore: gs://test-bucket/test_load.meta
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:139 Loading metadata from: /tmp/{'index_name': 'test_load'}.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:148 Successfully loaded metadata for '{'index_name': 'test_load'}'. Execution time: 0.9309s
FAILED                                                                   [ 37%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_pending 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: {'index_name': 'test_pending'} in collection 'faiss_indexes_registry'
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:74 Firestore data for '{'index_name': 'test_pending'}': vectorStatus=pending, gcs_meta_path=None
WARNING  ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:77 Index '{'index_name': 'test_pending'}' vectorStatus is 'pending', not 'completed'.
FAILED                                                                   [ 50%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_not_exists 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: {'index_name': 'test_not_exists'} in collection 'faiss_indexes_registry'
WARNING  ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:63 Index '{'index_name': 'test_not_exists'}' not found in Firestore registry.
FAILED                                                                   [ 62%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_success FAILED [ 75%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_pending FAILED [ 87%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_not_exists FAILED [100%]

=================================== FAILURES ===================================
_________________ TestSaveMetadataToFaiss.test_save_auto_embed _________________

self = <MagicMock name='Client' id='4606795184'>
calls = [call(project='test-project', database='test-db'), call(project='test-project', database='test-db')]
any_order = False

    def assert_has_calls(self, calls, any_order=False):
        """assert the mock has been called with the specified calls.
        The `mock_calls` list is checked for the calls.
    
        If `any_order` is False (the default) then the calls must be
        sequential. There can be extra calls before or after the
        specified calls.
    
        If `any_order` is True then the calls can be in any order, but
        they must all appear in `mock_calls`."""
        expected = [self._call_matcher(c) for c in calls]
        cause = next((e for e in expected if isinstance(e, Exception)), None)
        all_calls = _CallList(self._call_matcher(c) for c in self.mock_calls)
        if not any_order:
            if expected not in all_calls:
                if cause is None:
                    problem = 'Calls not found.'
                else:
                    problem = ('Error processing expected calls.\n'
                               'Errors: {}').format(
                                   [e if isinstance(e, Exception) else None
                                    for e in expected])
>               raise AssertionError(
                    f'{problem}\n'
                    f'Expected: {_CallList(calls)}'
                    f'{self._calls_repr(prefix="Actual").rstrip(".")}'
                ) from cause
E               AssertionError: Calls not found.
E               Expected: [call(project='test-project', database='test-db'),
E                call(project='test-project', database='test-db')]
E               Actual: [call(project='test-project', database='test-db'),
E                call().collection('documents'),
E                call().collection().document('test_index'),
E                call().collection().document().set({'docId': 'test_index', 'content': 'FAISS index metadata', 'timestamp': Sentinel: Value used to set a document field to the server timestamp., 'vectorStatus': 'completed', 'labels': {'Category': 'Documents/Workflow/MPC/AgentData/FAISS/2025', 'DocType': 'FAISSIndex', 'GCSPathIndex': 'gs://test-bucket/test_index.faiss', 'GCSPathMeta': 'gs://test-bucket/test_index.meta', 'VectorCount': <MagicMock name='IndexFlatL2().ntotal' id='4607058240'>, 'IndexDimension': 10, 'IndexType': 'MagicMock'}, 'metadata_snapshot': {'doc1': "{'text': 'Hello world'}", 'doc2': "{'text': 'Another document'}"}}),
E                call(project='test-project', database='test-db'),
E                call().collection('faiss_indexes_registry'),
E                call().collection().document('test_index'),
E                call().collection().document().set({'gcs_faiss_path': 'gs://test-bucket/test_index.faiss', 'gcs_meta_path': 'gs://test-bucket/test_index.meta', 'vectorStatus': 'completed', 'vector_count': <MagicMock name='IndexFlatL2().ntotal' id='4607058240'>, 'dimension': 10, 'index_type': 'MagicMock', 'created_at': Sentinel: Value used to set a document field to the server timestamp., 'updated_at': Sentinel: Value used to set a document field to the server timestamp., 'gcs_bucket': 'test-bucket'})]

/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py:966: AssertionError

During handling of the above exception, another exception occurred:

self = <test_faiss_tools.TestSaveMetadataToFaiss object at 0x107290ee0>
mock_pickle_dump = <MagicMock name='dump' id='4415105504'>
mock_faiss_write_index = <MagicMock name='write_index' id='4606991744'>
MockFaissIndexFlatL2 = <MagicMock name='IndexFlatL2' id='4606787792'>
mock_get_embedding = <MagicMock name='get_openai_embedding' id='4606803584'>
mock_firestore_constructor = <MagicMock name='Client' id='4606795184'>
mock_upload_with_retry = <MagicMock name='upload_with_retry' id='4606716576'>
mock_storage_client = <MagicMock name='Client' id='4606758336'>
mock_firestore_client = (<MagicMock name='Client()' id='4415304176'>, <MagicMock name='Client().collection().document()' id='4415365248'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x107292950>
request = <FixtureRequest for <Function test_save_auto_embed>>

    @patch(f"{SAVE_TOOL_MODULE_PATH}.storage.Client")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.upload_with_retry")
    @patch(FIRESTORE_CLIENT_PATH)
    @patch(f"{SAVE_TOOL_MODULE_PATH}.get_openai_embedding")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.faiss.IndexFlatL2")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.faiss.write_index")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.pickle.dump")
    def test_save_auto_embed(self, mock_pickle_dump, mock_faiss_write_index, MockFaissIndexFlatL2,
                             mock_get_embedding, mock_firestore_constructor, mock_upload_with_retry,
                             mock_storage_client, mock_firestore_client, mocker, request):
    
        from ADK.agent_data.tools.save_metadata_to_faiss_tool import save_metadata_to_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
    
        mock_bucket = MagicMock()
        mock_blob = MagicMock()
        mock_storage_client.return_value.bucket.return_value = mock_bucket
        mock_bucket.blob.return_value = mock_blob
    
        mock_index_instance = MockFaissIndexFlatL2.return_value
        mock_get_embedding.side_effect = [
            np.array([0.1]*10, dtype=np.float32),
            np.array([0.2]*10, dtype=np.float32)
        ]
    
        input_data = {
            "index_name": "test_index",
            "metadata_dict": {
                "doc1": {"text": "Hello world"},
                "doc2": {"text": "Another document"}
            },
            "text_field_to_embed": "text",
            "dimension": 10
        }
    
        # Expected data for pickle.dump calls
        expected_doc_ids_for_pickle = ['doc1', 'doc2']
        expected_metadata_for_pickle = input_data["metadata_dict"]
        expected_data_for_single_pickle_dump = {
            'ids': expected_doc_ids_for_pickle,
            'metadata': expected_metadata_for_pickle
        }
    
        result = save_metadata_to_faiss(
            index_name=input_data["index_name"],
            metadata_dict=input_data["metadata_dict"],
            text_field_to_embed=input_data["text_field_to_embed"],
            dimension=input_data["dimension"]
        )
        print(f"\nResult dictionary for {request.node.name}: {result}\n")
    
        assert result is not None, "Result dictionary is None"
        assert isinstance(result, dict), f"Result is not a dictionary, it's a {type(result)}"
        assert "status" in result, "Result dictionary missing 'status' key"
        if result.get("status") == "error":
            print(f"Tool returned error status: {result}")
        elif result.get("status") == "success":
            assert "gcs_faiss_path" in result, "Success result missing 'gcs_faiss_path'"
            assert "gcs_meta_path" in result, "Success result missing 'gcs_meta_path'"
            assert "vector_count" in result, "Success result missing 'vector_count'"
            assert "dimension" in result, "Success result missing 'dimension'"
            assert "index_name" in result, "Success result missing 'index_name'"
            assert "index_type" in result, "Success result missing 'index_type'"
            assert "duration_seconds" in result, "Success result missing 'duration_seconds'"
            assert "gcs_upload_status" in result, "Success result missing 'gcs_upload_status'"
    
        MockFaissIndexFlatL2.assert_called_once_with(10)
        assert mock_index_instance.add.call_count == 1
    
        mock_get_embedding.assert_has_calls([
            call(text="Hello world"),
            call(text="Another document")
        ], any_order=True)
    
        mock_faiss_write_index.assert_called_once_with(mock_index_instance, "/tmp/test_index.faiss")
    
        # Check call to pickle.dump
        mock_pickle_dump.assert_called_once_with(expected_data_for_single_pickle_dump, mocker.ANY)
    
        mock_upload_with_retry.assert_has_calls([
            call(mock_blob, "/tmp/test_index.faiss"),
            call(mock_blob, "/tmp/test_index.meta")
        ], any_order=True)
        assert mock_upload_with_retry.call_count == 2
    
        mock_storage_client.assert_called_once_with(project=MOCKED_ENV_VARS["FIRESTORE_PROJECT_ID"])
        mock_storage_client.return_value.bucket.assert_called_once_with(MOCKED_ENV_VARS["GCS_BUCKET_NAME"])
        mock_bucket.blob.assert_has_calls([
            call("test_index.faiss"),
            call("test_index.meta")
        ], any_order=True)
        assert mock_bucket.blob.call_count == 2
    
        expected_fs_client_args = {
            "project": MOCKED_ENV_VARS["FIRESTORE_PROJECT_ID"],
            "database": MOCKED_ENV_VARS["FIRESTORE_DATABASE_ID"]
        }
>       mock_firestore_constructor.assert_has_calls([
            call(**expected_fs_client_args),
            call(**expected_fs_client_args)
        ])
E       AssertionError: Calls not found.
E       Expected: [call(project='test-project', database='test-db'),
E        call(project='test-project', database='test-db')]
E       Actual: [call(project='test-project', database='test-db'),
E        call().collection('documents'),
E        call().collection().document('test_index'),
E        call().collection().document().set({'docId': 'test_index', 'content': 'FAISS index metadata', 'timestamp': Sentinel: Value used to set a document field to the server timestamp., 'vectorStatus': 'completed', 'labels': {'Category': 'Documents/Workflow/MPC/AgentData/FAISS/2025', 'DocType': 'FAISSIndex', 'GCSPathIndex': 'gs://test-bucket/test_index.faiss', 'GCSPathMeta': 'gs://test-bucket/test_index.meta', 'VectorCount': <MagicMock name='IndexFlatL2().ntotal' id='4607058240'>, 'IndexDimension': 10, 'IndexType': 'MagicMock'}, 'metadata_snapshot': {'doc1': "{'text': 'Hello world'}", 'doc2': "{'text': 'Another document'}"}}),
E        call(project='test-project', database='test-db'),
E        call().collection('faiss_indexes_registry'),
E        call().collection().document('test_index'),
E        call().collection().document().set({'gcs_faiss_path': 'gs://test-bucket/test_index.faiss', 'gcs_meta_path': 'gs://test-bucket/test_index.meta', 'vectorStatus': 'completed', 'vector_count': <MagicMock name='IndexFlatL2().ntotal' id='4607058240'>, 'dimension': 10, 'index_type': 'MagicMock', 'created_at': Sentinel: Value used to set a document field to the server timestamp., 'updated_at': Sentinel: Value used to set a document field to the server timestamp., 'gcs_bucket': 'test-bucket'})]

ADK/agent_data/tests/tools/test_faiss_tools.py:163: AssertionError
----------------------------- Captured stdout call -----------------------------

Result dictionary for test_save_auto_embed: {'status': 'success', 'message': "FAISS index 'test_index' and metadata saved and uploaded to GCS successfully.", 'index_name': 'test_index', 'gcs_bucket': 'test-bucket', 'gcs_faiss_path': 'gs://test-bucket/test_index.faiss', 'gcs_meta_path': 'gs://test-bucket/test_index.meta', 'vector_count': <MagicMock name='IndexFlatL2().ntotal' id='4607058240'>, 'dimension': 10, 'index_type': 'MagicMock', 'duration_seconds': 0.0, 'gcs_upload_status': 'success'}

------------------------------ Captured log call -------------------------------
INFO     ADK.agent_data.tools.register_tools:register_tools.py:5 sys.path in Cloud Run at top of register_tools.py: ['/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tests/tools', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python310.zip', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages']
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:20 OpenAI import successful.
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:45 FAISS import successful.
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:73 OpenAI client initialized successfully via external registry.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:81 vector_data not provided for index 'test_index'. Attempting to generate embeddings.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:95 Generating embeddings for 2 documents using field 'text'. Expected dimension: 10.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc1' (text: 'Hello world...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc1'.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc2' (text: 'Another document...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc2'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:152 Successfully generated 2 embeddings from 2 documents (out of 2 originally).
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_index' with 2 metadata entries and 2 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:184 vector_data is a list. Proceeding with list of vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 2 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (2) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 2 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 2 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains <MagicMock name='IndexFlatL2().ntotal' id='4607058240'> vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_index in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_index
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_index.faiss to gs://test-bucket/test_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_index.meta to gs://test-bucket/test_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_index' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_index' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_index' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_index.meta
______________ TestSaveMetadataToFaiss.test_save_with_vector_data ______________

self = <MagicMock name='Client' id='4607975360'>
calls = [call(project='test-project', database='test-db'), call(project='test-project', database='test-db')]
any_order = False

    def assert_has_calls(self, calls, any_order=False):
        """assert the mock has been called with the specified calls.
        The `mock_calls` list is checked for the calls.
    
        If `any_order` is False (the default) then the calls must be
        sequential. There can be extra calls before or after the
        specified calls.
    
        If `any_order` is True then the calls can be in any order, but
        they must all appear in `mock_calls`."""
        expected = [self._call_matcher(c) for c in calls]
        cause = next((e for e in expected if isinstance(e, Exception)), None)
        all_calls = _CallList(self._call_matcher(c) for c in self.mock_calls)
        if not any_order:
            if expected not in all_calls:
                if cause is None:
                    problem = 'Calls not found.'
                else:
                    problem = ('Error processing expected calls.\n'
                               'Errors: {}').format(
                                   [e if isinstance(e, Exception) else None
                                    for e in expected])
>               raise AssertionError(
                    f'{problem}\n'
                    f'Expected: {_CallList(calls)}'
                    f'{self._calls_repr(prefix="Actual").rstrip(".")}'
                ) from cause
E               AssertionError: Calls not found.
E               Expected: [call(project='test-project', database='test-db'),
E                call(project='test-project', database='test-db')]
E               Actual: [call(project='test-project', database='test-db'),
E                call().collection('documents'),
E                call().collection().document('test_index_vector'),
E                call().collection().document().set({'docId': 'test_index_vector', 'content': 'FAISS index metadata', 'timestamp': Sentinel: Value used to set a document field to the server timestamp., 'vectorStatus': 'completed', 'labels': {'Category': 'Documents/Workflow/MPC/AgentData/FAISS/2025', 'DocType': 'FAISSIndex', 'GCSPathIndex': 'gs://test-bucket/test_index_vector.faiss', 'GCSPathMeta': 'gs://test-bucket/test_index_vector.meta', 'VectorCount': <MagicMock name='IndexFlatL2().ntotal' id='4607849856'>, 'IndexDimension': 10, 'IndexType': 'MagicMock'}, 'metadata_snapshot': {'doc1': "{'text': 'Hello world'}", 'doc2': "{'text': 'Another document'}"}}),
E                call(project='test-project', database='test-db'),
E                call().collection('faiss_indexes_registry'),
E                call().collection().document('test_index_vector'),
E                call().collection().document().set({'gcs_faiss_path': 'gs://test-bucket/test_index_vector.faiss', 'gcs_meta_path': 'gs://test-bucket/test_index_vector.meta', 'vectorStatus': 'completed', 'vector_count': <MagicMock name='IndexFlatL2().ntotal' id='4607849856'>, 'dimension': 10, 'index_type': 'MagicMock', 'created_at': Sentinel: Value used to set a document field to the server timestamp., 'updated_at': Sentinel: Value used to set a document field to the server timestamp., 'gcs_bucket': 'test-bucket'})]

/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py:966: AssertionError

During handling of the above exception, another exception occurred:

self = <test_faiss_tools.TestSaveMetadataToFaiss object at 0x107290eb0>
mock_pickle_dump = <MagicMock name='dump' id='4607985216'>
mock_faiss_write_index = <MagicMock name='write_index' id='4607994144'>
MockFaissIndexFlatL2 = <MagicMock name='IndexFlatL2' id='4607967488'>
mock_firestore_constructor = <MagicMock name='Client' id='4607975360'>
mock_upload_with_retry = <MagicMock name='upload_with_retry' id='4607983232'>
mock_storage_client = <MagicMock name='Client' id='4607958400'>
mock_firestore_client = (<MagicMock name='Client()' id='4607153616'>, <MagicMock name='Client().collection().document()' id='4608268448'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x10d225450>
request = <FixtureRequest for <Function test_save_with_vector_data>>

    @patch(f"{SAVE_TOOL_MODULE_PATH}.storage.Client")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.upload_with_retry")
    @patch(FIRESTORE_CLIENT_PATH)
    @patch(f"{SAVE_TOOL_MODULE_PATH}.faiss.IndexFlatL2")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.faiss.write_index")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.pickle.dump")
    def test_save_with_vector_data(self, mock_pickle_dump, mock_faiss_write_index, MockFaissIndexFlatL2,
                                    mock_firestore_constructor, mock_upload_with_retry,
                                    mock_storage_client, mock_firestore_client, mocker, request):
    
        from ADK.agent_data.tools.save_metadata_to_faiss_tool import save_metadata_to_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
    
        mock_bucket = MagicMock()
        mock_blob = MagicMock()
        mock_storage_client.return_value.bucket.return_value = mock_bucket
        mock_bucket.blob.return_value = mock_blob
    
        mock_index_instance = MockFaissIndexFlatL2.return_value
        # mock_pickle_dump.return_value = b"pickled_metadata_vector" # Not needed as dump returns None
    
        input_data = {
            "index_name": "test_index_vector",
            "metadata_dict": {
                "doc1": {"text": "Hello world"},
                "doc2": {"text": "Another document"}
            },
            "vector_data": {
                "doc1": [0.1]*10,
                "doc2": [0.2]*10
            },
            "dimension": 10
        }
    
        # Expected data for pickle.dump calls
        expected_doc_ids_for_pickle = ['doc1', 'doc2']
        expected_metadata_for_pickle = input_data["metadata_dict"]
        expected_data_for_single_pickle_dump = {
            'ids': expected_doc_ids_for_pickle,
            'metadata': expected_metadata_for_pickle
        }
    
        result = save_metadata_to_faiss(
            index_name=input_data["index_name"],
            metadata_dict=input_data["metadata_dict"],
            vector_data=input_data["vector_data"],
            dimension=input_data["dimension"]
        )
        print(f"\nResult dictionary for {request.node.name}: {result}\n")
    
        assert result is not None, "Result dictionary is None"
        assert isinstance(result, dict), f"Result is not a dictionary, it's a {type(result)}"
        assert "status" in result, "Result dictionary missing 'status' key"
        if result.get("status") == "error":
            print(f"Tool returned error status: {result}")
        elif result.get("status") == "success":
            assert "gcs_faiss_path" in result, "Success result missing 'gcs_faiss_path'"
            assert "gcs_meta_path" in result, "Success result missing 'gcs_meta_path'"
            assert "vector_count" in result, "Success result missing 'vector_count'"
            assert "dimension" in result, "Success result missing 'dimension'"
            assert "index_name" in result, "Success result missing 'index_name'"
            assert "index_type" in result, "Success result missing 'index_type'"
            assert "duration_seconds" in result, "Success result missing 'duration_seconds'"
            assert "gcs_upload_status" in result, "Success result missing 'gcs_upload_status'"
    
        MockFaissIndexFlatL2.assert_called_once_with(10)
        mock_index_instance.add.assert_called_once()
        added_vectors = mock_index_instance.add.call_args[0][0]
        assert np.array_equal(added_vectors, np.array([[0.1]*10, [0.2]*10], dtype=np.float32))
    
        mock_faiss_write_index.assert_called_once_with(mock_index_instance, "/tmp/test_index_vector.faiss")
    
        # Check call to pickle.dump
        mock_pickle_dump.assert_called_once_with(expected_data_for_single_pickle_dump, mocker.ANY)
    
        mock_upload_with_retry.assert_has_calls([
            call(mock_blob, "/tmp/test_index_vector.faiss"),
            call(mock_blob, "/tmp/test_index_vector.meta")
        ], any_order=True)
        assert mock_upload_with_retry.call_count == 2
    
        mock_storage_client.assert_called_once_with(project=MOCKED_ENV_VARS["FIRESTORE_PROJECT_ID"])
        mock_storage_client.return_value.bucket.assert_called_once_with(MOCKED_ENV_VARS["GCS_BUCKET_NAME"])
        mock_bucket.blob.assert_has_calls([
            call("test_index_vector.faiss"),
            call("test_index_vector.meta")
        ], any_order=True)
        assert mock_bucket.blob.call_count == 2
    
        expected_fs_client_args = {
            "project": MOCKED_ENV_VARS["FIRESTORE_PROJECT_ID"],
            "database": MOCKED_ENV_VARS["FIRESTORE_DATABASE_ID"]
        }
>       mock_firestore_constructor.assert_has_calls([
            call(**expected_fs_client_args),
            call(**expected_fs_client_args)
        ])
E       AssertionError: Calls not found.
E       Expected: [call(project='test-project', database='test-db'),
E        call(project='test-project', database='test-db')]
E       Actual: [call(project='test-project', database='test-db'),
E        call().collection('documents'),
E        call().collection().document('test_index_vector'),
E        call().collection().document().set({'docId': 'test_index_vector', 'content': 'FAISS index metadata', 'timestamp': Sentinel: Value used to set a document field to the server timestamp., 'vectorStatus': 'completed', 'labels': {'Category': 'Documents/Workflow/MPC/AgentData/FAISS/2025', 'DocType': 'FAISSIndex', 'GCSPathIndex': 'gs://test-bucket/test_index_vector.faiss', 'GCSPathMeta': 'gs://test-bucket/test_index_vector.meta', 'VectorCount': <MagicMock name='IndexFlatL2().ntotal' id='4607849856'>, 'IndexDimension': 10, 'IndexType': 'MagicMock'}, 'metadata_snapshot': {'doc1': "{'text': 'Hello world'}", 'doc2': "{'text': 'Another document'}"}}),
E        call(project='test-project', database='test-db'),
E        call().collection('faiss_indexes_registry'),
E        call().collection().document('test_index_vector'),
E        call().collection().document().set({'gcs_faiss_path': 'gs://test-bucket/test_index_vector.faiss', 'gcs_meta_path': 'gs://test-bucket/test_index_vector.meta', 'vectorStatus': 'completed', 'vector_count': <MagicMock name='IndexFlatL2().ntotal' id='4607849856'>, 'dimension': 10, 'index_type': 'MagicMock', 'created_at': Sentinel: Value used to set a document field to the server timestamp., 'updated_at': Sentinel: Value used to set a document field to the server timestamp., 'gcs_bucket': 'test-bucket'})]

ADK/agent_data/tests/tools/test_faiss_tools.py:275: AssertionError
----------------------------- Captured stdout call -----------------------------

Result dictionary for test_save_with_vector_data: {'status': 'success', 'message': "FAISS index 'test_index_vector' and metadata saved and uploaded to GCS successfully.", 'index_name': 'test_index_vector', 'gcs_bucket': 'test-bucket', 'gcs_faiss_path': 'gs://test-bucket/test_index_vector.faiss', 'gcs_meta_path': 'gs://test-bucket/test_index_vector.meta', 'vector_count': <MagicMock name='IndexFlatL2().ntotal' id='4607849856'>, 'dimension': 10, 'index_type': 'MagicMock', 'duration_seconds': 0.0, 'gcs_upload_status': 'success'}

------------------------------ Captured log call -------------------------------
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_index_vector' with 2 metadata entries and 2 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:163 vector_data is a dict. Extracting values as vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 2 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (2) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 2 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 2 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains <MagicMock name='IndexFlatL2().ntotal' id='4607849856'> vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_index_vector.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_index_vector.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_index_vector in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_index_vector
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_index_vector.faiss to gs://test-bucket/test_index_vector.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_index_vector.meta to gs://test-bucket/test_index_vector.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_index_vector' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_index_vector' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_index_vector' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_index_vector.meta
________________ TestLoadMetadataFromFaiss.test_load_completed _________________

self = <test_faiss_tools.TestLoadMetadataFromFaiss object at 0x107291480>
mock_builtin_open = <MagicMock name='open' id='4608174992'>
mock_pickle_load = <MagicMock name='load' id='4608234144'>
mock_firestore_constructor = <MagicMock name='Client' id='4608242016'>
mock_internal_download_gcs = <MagicMock name='_download_gcs_file' id='4608184416'>
mock_firestore_client = (<MagicMock name='Client()' id='4608931920'>, <MagicMock name='Client().collection().document()' id='4608229088'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x1129a1d20>

    @patch(DOWNLOAD_GCS_LOAD_PATH)
    @patch(FIRESTORE_CLIENT_PATH)
    @patch(PICKLE_LOAD_LOAD_PATH)
    @patch(f"{LOAD_TOOL_MODULE_PATH}.open")
    def test_load_completed(self, mock_builtin_open, mock_pickle_load, mock_firestore_constructor,
                            mock_internal_download_gcs,
                            mock_firestore_client, mocker):
        from ADK.agent_data.tools.load_metadata_from_faiss_tool import load_metadata_from_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
    
        mock_doc_snapshot = MagicMock()
        mock_doc_snapshot.exists = True
        mock_doc_snapshot.to_dict.return_value = {
            "vectorStatus": "completed",
            "gcs_meta_path": "gs://test-bucket/test_load.meta"
        }
        mock_doc_ref.get.return_value = mock_doc_snapshot
    
        expected_temp_meta_path = "/tmp/test_load.meta" # Define expected path
        mock_internal_download_gcs.return_value = None
    
        expected_metadata = {"key": "value"}
        pickled_bytes = pickle.dumps(expected_metadata)
    
        mock_file_content_stream = io.BytesIO(pickled_bytes)
        mock_builtin_open.return_value.__enter__.return_value = mock_file_content_stream
        mock_pickle_load.return_value = expected_metadata
    
        result = load_metadata_from_faiss({"index_name": "test_load"})
    
>       assert result["status"] == "success", f"Actual result: {result}"
E       KeyError: 'status'

ADK/agent_data/tests/tools/test_faiss_tools.py:320: KeyError
------------------------------ Captured log call -------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: {'index_name': 'test_load'} in collection 'faiss_indexes_registry'
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:74 Firestore data for '{'index_name': 'test_load'}': vectorStatus=completed, gcs_meta_path=gs://test-bucket/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:91 Firestore status check passed for index '{'index_name': 'test_load'}'. Using gcs_meta_path: gs://test-bucket/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:110 Attempting GCS download using path from Firestore: gs://test-bucket/test_load.meta
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:139 Loading metadata from: /tmp/{'index_name': 'test_load'}.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:148 Successfully loaded metadata for '{'index_name': 'test_load'}'. Execution time: 0.9309s
_________________ TestLoadMetadataFromFaiss.test_load_pending __________________

self = <test_faiss_tools.TestLoadMetadataFromFaiss object at 0x1072916c0>
mock_firestore_constructor = <MagicMock name='Client' id='4608768704'>
mock_firestore_client = (<MagicMock name='Client()' id='4608962960'>, <MagicMock name='Client().collection().document()' id='4608808976'>)

    @patch(FIRESTORE_CLIENT_PATH)
    def test_load_pending(self, mock_firestore_constructor, mock_firestore_client):
        from ADK.agent_data.tools.load_metadata_from_faiss_tool import load_metadata_from_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
    
        mock_doc_snapshot = MagicMock()
        mock_doc_snapshot.exists = True
        mock_doc_snapshot.to_dict.return_value = {"vectorStatus": "pending"}
        mock_doc_ref.get.return_value = mock_doc_snapshot
    
        result = load_metadata_from_faiss({"index_name": "test_pending"})
    
>       assert result["status"] == "error", f"Actual result: {result}"
E       KeyError: 'status'

ADK/agent_data/tests/tools/test_faiss_tools.py:341: KeyError
------------------------------ Captured log call -------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: {'index_name': 'test_pending'} in collection 'faiss_indexes_registry'
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:74 Firestore data for '{'index_name': 'test_pending'}': vectorStatus=pending, gcs_meta_path=None
WARNING  ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:77 Index '{'index_name': 'test_pending'}' vectorStatus is 'pending', not 'completed'.
________________ TestLoadMetadataFromFaiss.test_load_not_exists ________________

self = <test_faiss_tools.TestLoadMetadataFromFaiss object at 0x107291930>
mock_firestore_constructor = <MagicMock name='Client' id='4609381696'>
mock_firestore_client = (<MagicMock name='Client()' id='4610098656'>, <MagicMock name='Client().collection().document()' id='4610242832'>)

    @patch(FIRESTORE_CLIENT_PATH)
    def test_load_not_exists(self, mock_firestore_constructor, mock_firestore_client):
        from ADK.agent_data.tools.load_metadata_from_faiss_tool import load_metadata_from_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
    
        mock_doc_snapshot = MagicMock()
        mock_doc_snapshot.exists = False
        mock_doc_ref.get.return_value = mock_doc_snapshot
    
        result = load_metadata_from_faiss({"index_name": "test_not_exists"})
    
>       assert result["status"] == "error", f"Actual result: {result}"
E       KeyError: 'status'

ADK/agent_data/tests/tools/test_faiss_tools.py:357: KeyError
------------------------------ Captured log call -------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: {'index_name': 'test_not_exists'} in collection 'faiss_indexes_registry'
WARNING  ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:63 Index '{'index_name': 'test_not_exists'}' not found in Firestore registry.
__________________ TestQueryMetadataFaiss.test_query_success ___________________

self = <test_faiss_tools.TestQueryMetadataFaiss object at 0x107291e40>
mock_builtin_open = <MagicMock name='open' id='4610091584'>
mock_pickle_load = <MagicMock name='load' id='4609717728'>
mock_faiss_read_index = <MagicMock name='read_index' id='4609710432'>
mock_get_embedding = <MagicMock name='get_openai_embedding' id='4609881952'>
mock_firestore_constructor = <MagicMock name='Client' id='4609644128'>
mock_internal_download_gcs = <MagicMock name='_download_gcs_file' id='4609652000'>
mock_firestore_client = (<MagicMock name='Client()' id='4609790528'>, <MagicMock name='Client().collection().document()' id='4610111376'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x112c87400>

    @patch(DOWNLOAD_GCS_QUERY_PATH)
    @patch(FIRESTORE_CLIENT_PATH)
    @patch(GET_EMBEDDING_PATH) # Patched at its definition
    @patch(FAISS_READ_INDEX_QUERY_PATH)
    @patch(PICKLE_LOAD_QUERY_PATH)
    @patch(f"{QUERY_TOOL_MODULE_PATH}.open")
    def test_query_success(self, mock_builtin_open, mock_pickle_load, mock_faiss_read_index,
                           mock_get_embedding, mock_firestore_constructor,
                           mock_internal_download_gcs,
                           mock_firestore_client, mocker):
        from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
        mock_doc_snapshot = MagicMock()
        mock_doc_snapshot.exists = True
        doc_data_from_firestore = {
            "vectorStatus": "completed",
            "gcs_faiss_path": "gs://test-bucket/test_query.faiss",
            "gcs_meta_path": "gs://test-bucket/test_query.meta",
            "dimension": 5,
            "doc_id_list_for_faiss": ["doc_id_0", "doc_id_1"]
        }
        mock_doc_snapshot.to_dict.return_value = doc_data_from_firestore
        mock_doc_ref.get.return_value = mock_doc_snapshot
    
        # Define expected local paths for downloaded files
        expected_temp_faiss_path = "/tmp/controlled_query.faiss"
        expected_temp_meta_path = "/tmp/controlled_query.meta"
    
        # _download_gcs_file is mocked by mock_internal_download_gcs
        # No need to mock tempfile.NamedTemporaryFile anymore
        mock_internal_download_gcs.return_value = None
    
        mock_faiss_index_instance = MagicMock(spec=faiss.Index)
        mock_faiss_index_instance.ntotal = 2
        mock_faiss_index_instance.search.return_value = (np.array([[0.1]]), np.array([[0]]))
        mock_faiss_read_index.return_value = mock_faiss_index_instance
    
        original_metadata_content = {"doc_id_0": {"content": "This is doc 0"}, "doc_id_1": {"content": "This is doc 1"}}
    
        mock_meta_file_stream = io.BytesIO(pickle.dumps(original_metadata_content))
        mock_faiss_file_stream = io.BytesIO(b"dummy faiss index bytes")
    
        def open_side_effect_query(path, mode):
            if path == expected_temp_meta_path and mode == "rb": # Use expected_temp_meta_path
                cm_mock = MagicMock()
                cm_mock.__enter__.return_value = mock_meta_file_stream
                cm_mock.__exit__.return_value = None
                return cm_mock
            elif path == expected_temp_faiss_path and mode == "rb": # Use expected_temp_faiss_path
                cm_mock = MagicMock()
                cm_mock.__enter__.return_value = mock_faiss_file_stream
                cm_mock.__exit__.return_value = None
                return cm_mock
            raise FileNotFoundError(f"Unexpected open call in query: {path}, {mode}")
        mock_builtin_open.side_effect = open_side_effect_query
    
        mock_pickle_load.return_value = original_metadata_content
    
        mock_query_embedding = np.array([0.5]*5, dtype=np.float32)
        mock_get_embedding.return_value = mock_query_embedding
    
        input_data = {"index_name": "test_query", "query_text": "find similar", "top_k": 1}
>       result = query_metadata_faiss(input_data)
E       TypeError: query_metadata_faiss() missing 2 required positional arguments: 'index_name' and 'key'

ADK/agent_data/tests/tools/test_faiss_tools.py:427: TypeError
__________________ TestQueryMetadataFaiss.test_query_pending ___________________

self = <test_faiss_tools.TestQueryMetadataFaiss object at 0x107292080>
mock_firestore_constructor = <MagicMock name='Client' id='4609731472'>
mock_firestore_client = (<MagicMock name='Client()' id='4609695440'>, <MagicMock name='Client().collection().document()' id='4610019232'>)

    @patch(FIRESTORE_CLIENT_PATH)
    def test_query_pending(self, mock_firestore_constructor, mock_firestore_client):
        from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
        mock_doc_snapshot = MagicMock()
        mock_doc_snapshot.exists = True
        mock_doc_snapshot.to_dict.return_value = {"vectorStatus": "pending"}
        mock_doc_ref.get.return_value = mock_doc_snapshot
    
>       result = query_metadata_faiss({"index_name": "test_query_pending", "query_text": "q", "top_k": 1})
E       TypeError: query_metadata_faiss() missing 2 required positional arguments: 'index_name' and 'key'

ADK/agent_data/tests/tools/test_faiss_tools.py:456: TypeError
_________________ TestQueryMetadataFaiss.test_query_not_exists _________________

self = <test_faiss_tools.TestQueryMetadataFaiss object at 0x1072922f0>
mock_firestore_constructor = <MagicMock name='Client' id='4609964832'>
mock_firestore_client = (<MagicMock name='Client()' id='4609712160'>, <MagicMock name='Client().collection().document()' id='4610252592'>)

    @patch(FIRESTORE_CLIENT_PATH)
    def test_query_not_exists(self, mock_firestore_constructor, mock_firestore_client):
        from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss
        mock_firestore_constructor.return_value = mock_firestore_client[0]
        mock_doc_ref = mock_firestore_client[1]
        mock_doc_snapshot = MagicMock()
        mock_doc_snapshot.exists = False
        mock_doc_ref.get.return_value = mock_doc_snapshot
    
>       result = query_metadata_faiss({"index_name": "test_query_not_exists", "query_text": "q", "top_k": 1})
E       TypeError: query_metadata_faiss() missing 2 required positional arguments: 'index_name' and 'key'

ADK/agent_data/tests/tools/test_faiss_tools.py:469: TypeError
=============================== warnings summary ===============================
setup/venv/lib/python3.10/site-packages/faiss/loader.py:49
  /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.
    from numpy.core._multiarray_umath import __cpu_features__

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type SwigPyPacked has no __module__ attribute

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type SwigPyObject has no __module__ attribute

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type swigvarlink has no __module__ attribute

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_auto_embed
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_with_vector_data
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_completed
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_pending
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_not_exists
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_success
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_pending
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_not_exists
======================== 8 failed, 4 warnings in 2.66s =========================
