/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... 
----------------------------- live log collection ------------------------------
DEBUG    faiss.loader:loader.py:89 Environment variable FAISS_OPT_LEVEL is not set, so let's pick the instruction set according to the current CPU
INFO     faiss.loader:loader.py:148 Loading faiss.
INFO     faiss.loader:loader.py:150 Successfully loaded faiss.
INFO     faiss:__init__.py:174 Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
collected 12 items

ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_auto_embed 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.register_tools:register_tools.py:5 sys.path in Cloud Run at top of register_tools.py: ['/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tests/tools', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python310.zip', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10', '/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload', '/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages']
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:20 OpenAI import successful.
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:45 FAISS import successful.
INFO     ADK.agent_data.tools.external_tool_registry:external_tool_registry.py:73 OpenAI client initialized successfully via external registry.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:81 vector_data not provided for index 'test_index'. Attempting to generate embeddings.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:95 Generating embeddings for 2 documents using field 'text'. Expected dimension: 10.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc1' (text: 'Hello world...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc1'.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc2' (text: 'Another document...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc2'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:152 Successfully generated 2 embeddings from 2 documents (out of 2 originally).
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_index' with 2 metadata entries and 2 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:184 vector_data is a list. Proceeding with list of vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 2 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (2) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 2 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 2 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains <MagicMock name='IndexFlatL2().ntotal' id='4591152064'> vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_index in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_index
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_index.faiss to gs://test-bucket/test_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_index.meta to gs://test-bucket/test_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_index' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_index' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_index' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_index.meta
PASSED                                                                   [  8%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_with_vector_data 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_index_vector' with 2 metadata entries and 2 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:163 vector_data is a dict. Extracting values as vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 2 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (2) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 2 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 2 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains <MagicMock name='IndexFlatL2().ntotal' id='4591701104'> vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_index_vector.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_index_vector.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_index_vector in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_index_vector
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_index_vector.faiss to gs://test-bucket/test_index_vector.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_index_vector.meta to gs://test-bucket/test_index_vector.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_index_vector' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_index_vector' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_index_vector' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_index_vector.meta
PASSED                                                                   [ 16%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_openai_embedding_error 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:81 vector_data not provided for index 'test_openai_error_index'. Attempting to generate embeddings.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:95 Generating embeddings for 2 documents using field 'text'. Expected dimension: 10.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc1' (text: 'Text that will cause embedding error...').
ERROR    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:139 Failed to generate embedding for doc_id 'doc1' (embedding was None). Skipping.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc2' (text: 'Another document...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc2'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:152 Successfully generated 1 embeddings from 1 documents (out of 2 originally).
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_openai_error_index' with 1 metadata entries and 1 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:184 vector_data is a list. Proceeding with list of vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 1 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (1) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 1 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 1 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains 1 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_openai_error_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_openai_error_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_openai_error_index in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_openai_error_index
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_openai_error_index.faiss to gs://test-bucket/test_openai_error_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_openai_error_index.meta to gs://test-bucket/test_openai_error_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_openai_error_index' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_openai_error_index' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_openai_error_index' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_openai_error_index.meta
FAILED                                                                   [ 25%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_completed 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: test_load in collection 'faiss_indexes_registry'
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:74 Firestore data for 'test_load': vectorStatus=completed, gcs_meta_path=gs://test-bucket/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:91 Firestore status check passed for index 'test_load'. Using gcs_meta_path: gs://test-bucket/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:110 Attempting GCS download using path from Firestore: gs://test-bucket/test_load.meta
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:139 Loading metadata from: /tmp/test_load.meta
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:148 Successfully loaded metadata for 'test_load'. Execution time: 0.9090s
PASSED                                                                   [ 33%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_pending 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: test_pending in collection 'faiss_indexes_registry'
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:74 Firestore data for 'test_pending': vectorStatus=pending, gcs_meta_path=None
WARNING  ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:77 Index 'test_pending' vectorStatus is 'pending', not 'completed'.
PASSED                                                                   [ 41%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_not_exists 
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:55 Checking Firestore status for index: test_not_exists in collection 'faiss_indexes_registry'
WARNING  ADK.agent_data.tools.load_metadata_from_faiss_tool:load_metadata_from_faiss_tool.py:63 Index 'test_not_exists' not found in Firestore registry.
PASSED                                                                   [ 50%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_success 
-------------------------------- live log setup --------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:258 Executing query_metadata_faiss tool for index 'test_query', query_text (was key) 'find similar content to doc 0' (top_k=1).
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:265 Generating embedding for query text: 'find similar content to doc 0' directly.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:280 Successfully generated embedding for query text 'find similar content to doc 0'. Vector length: 5
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:72 Checking Firestore status for index: test_query in collection 'faiss_indexes_registry' (Project: test-project, DB: test-db)
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:90 Firestore data for 'test_query': vectorStatus=completed, gcs_faiss_path=gs://test-bucket/test_query.faiss, gcs_meta_path=gs://test-bucket/test_query.meta
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:110 Firestore status check passed for index 'test_query'.
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:117 Local FAISS index file missing: /tmp/test_query.faiss. Attempting download from gs://test-bucket/test_query.faiss
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:126 Local metadata file missing: /tmp/test_query.meta. Attempting download from gs://test-bucket/test_query.meta
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:133 GCS download attempt finished for index 'test_query'. Files downloaded: {'index': True, 'meta': True}
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:136 Loading FAISS index for query: /tmp/test_query.faiss
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:139 Loaded FAISS index 'test_query' with dimension 5.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:141 Loading metadata for query: /tmp/test_query.meta
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:148 Loaded 2 metadata entries and 2 stored IDs.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:151 Validating query vector dimension (5) against index dimension (5).
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:159 Query vector validation successful.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:163 Performing FAISS search for top 1 neighbors.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:165 FAISS search completed. Found indices: [[0]], Distances: [[0.10000000149011612]]
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:186 Retrieved 1 metadata results for query.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:205 query_metadata_faiss_internal finished for index 'test_query'. Status: success. Time: 0.6876s
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:240 Starting cleanup for internal query on index 'test_query'.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:254 Cleanup finished for internal query on index 'test_query'.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:319 FAISS query completed. Returning 1 neighbors' metadata for index 'test_query'.
PASSED                                                                   [ 58%]
------------------------------ live log teardown -------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector

ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_pending 
-------------------------------- live log setup --------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:258 Executing query_metadata_faiss tool for index 'test_query_pending', query_text (was key) 'q' (top_k=1).
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:265 Generating embedding for query text: 'q' directly.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:280 Successfully generated embedding for query text 'q'. Vector length: 5
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:72 Checking Firestore status for index: test_query_pending in collection 'faiss_indexes_registry' (Project: test-project, DB: test-db)
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:90 Firestore data for 'test_query_pending': vectorStatus=pending, gcs_faiss_path=None, gcs_meta_path=None
WARNING  ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:93 Index 'test_query_pending' vectorStatus is 'pending', not 'completed'.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:240 Starting cleanup for internal query on index 'test_query_pending'.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:254 Cleanup finished for internal query on index 'test_query_pending'.
ERROR    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:294 Internal FAISS query failed for index 'test_query_pending': Index 'test_query_pending' is not ready (vectorStatus: pending).
PASSED                                                                   [ 66%]
------------------------------ live log teardown -------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector

ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_not_exists 
-------------------------------- live log setup --------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:258 Executing query_metadata_faiss tool for index 'test_query_not_exists', query_text (was key) 'q' (top_k=1).
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:265 Generating embedding for query text: 'q' directly.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:280 Successfully generated embedding for query text 'q'. Vector length: 5
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:72 Checking Firestore status for index: test_query_not_exists in collection 'faiss_indexes_registry' (Project: test-project, DB: test-db)
WARNING  ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:78 Index 'test_query_not_exists' not found in Firestore registry.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:240 Starting cleanup for internal query on index 'test_query_not_exists'.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:254 Cleanup finished for internal query on index 'test_query_not_exists'.
ERROR    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:294 Internal FAISS query failed for index 'test_query_not_exists': Index 'test_query_not_exists' not found in Firestore registry.
PASSED                                                                   [ 75%]
------------------------------ live log teardown -------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector

ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_firestore_error 
-------------------------------- live log setup --------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:258 Executing query_metadata_faiss tool for index 'test_firestore_error_query', query_text (was key) 'some query' (top_k=1).
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:265 Generating embedding for query text: 'some query' directly.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:280 Successfully generated embedding for query text 'some query'. Vector length: 5
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:72 Checking Firestore status for index: test_firestore_error_query in collection 'faiss_indexes_registry' (Project: test-project, DB: test-db)
ERROR    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:233 General error during FAISS query internal for 'test_firestore_error_query': 503 Mocked Firestore Service Unavailable
Traceback (most recent call last):
  File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tools/query_metadata_faiss_tool.py", line 75, in query_metadata_faiss_internal
    doc = doc_ref.get()
  File "/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py", line 1173, in _execute_mock_call
    raise effect
google.api_core.exceptions.ServiceUnavailable: 503 Mocked Firestore Service Unavailable
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:240 Starting cleanup for internal query on index 'test_firestore_error_query'.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:254 Cleanup finished for internal query on index 'test_firestore_error_query'.
ERROR    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:294 Internal FAISS query failed for index 'test_firestore_error_query': Unexpected error during FAISS query: 503 Mocked Firestore Service Unavailable
PASSED                                                                   [ 83%]
------------------------------ live log teardown -------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector

ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_gcs_download_error 
-------------------------------- live log setup --------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector
-------------------------------- live log call ---------------------------------
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:258 Executing query_metadata_faiss tool for index 'test_gcs_error_query', query_text (was key) 'another query' (top_k=1).
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:265 Generating embedding for query text: 'another query' directly.
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:280 Successfully generated embedding for query text 'another query'. Vector length: 5
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:72 Checking Firestore status for index: test_gcs_error_query in collection 'faiss_indexes_registry' (Project: test-project, DB: test-db)
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:90 Firestore data for 'test_gcs_error_query': vectorStatus=completed, gcs_faiss_path=gs://test-bucket/test_gcs_error.faiss, gcs_meta_path=gs://test-bucket/test_gcs_error.meta
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:110 Firestore status check passed for index 'test_gcs_error_query'.
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
DEBUG    google.auth._default:_default.py:278 Checking None for explicit credentials as part of auth process...
DEBUG    google.auth._default:_default.py:250 Checking Cloud SDK credentials as part of auth process...
INFO     ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:117 Local FAISS index file missing: /tmp/test_gcs_error_query.faiss. Attempting download from gs://test-bucket/test_gcs_error.faiss
ERROR    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:233 General error during FAISS query internal for 'test_gcs_error_query': 404 Mocked GCS File Not Found
Traceback (most recent call last):
  File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tools/query_metadata_faiss_tool.py", line 119, in query_metadata_faiss_internal
    _download_gcs_file(storage_client, bucket_name, blob_name, local_index_path)
  File "/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/opt/homebrew/Cellar/python@3.10/3.10.17/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py", line 1173, in _execute_mock_call
    raise effect
google.api_core.exceptions.NotFound: 404 Mocked GCS File Not Found
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:240 Starting cleanup for internal query on index 'test_gcs_error_query'.
DEBUG    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:254 Cleanup finished for internal query on index 'test_gcs_error_query'.
ERROR    ADK.agent_data.tools.query_metadata_faiss_tool:query_metadata_faiss_tool.py:294 Internal FAISS query failed for index 'test_gcs_error_query': Unexpected error during FAISS query: 404 Mocked GCS File Not Found
PASSED                                                                   [ 91%]
------------------------------ live log teardown -------------------------------
DEBUG    asyncio:selector_events.py:54 Using selector: KqueueSelector

ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_faiss_search_error ERROR [100%]

==================================== ERRORS ====================================
____ ERROR at setup of TestQueryMetadataFaiss.test_query_faiss_search_error ____
file /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tests/tools/test_faiss_tools.py, line 714
      @patch(f"{QUERY_TOOL_MODULE_PATH}.open")
      async def test_query_faiss_search_error(self, mock_builtin_open, mock_pickle_load,
                                              mock_get_embedding, mock_firestore_constructor,
                                              mock_internal_download_gcs, mock_faiss_read_index,
                                              mock_firestore_client, mocker, request):
          from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss

          index_name_for_test = "test_faiss_search_error_query"
          local_meta_path_expected = f"/tmp/{index_name_for_test}.meta"

          mock_agent_context = MagicMock()
          mock_get_embedding.return_value = [0.1]*5

          mock_firestore_constructor.return_value = mock_firestore_client[0]
          mock_doc_ref = mock_firestore_client[1]
          mock_doc_snapshot = MagicMock()
          mock_doc_snapshot.exists = True
          doc_data_from_firestore = {
              "vectorStatus": "completed",
              "gcs_faiss_path": f"gs://test-bucket/{index_name_for_test}.faiss",
              "gcs_meta_path": f"gs://test-bucket/{index_name_for_test}.meta",
              "dimension": 5,
              "doc_id_list_for_faiss": ["doc1", "doc2"]
          }
          mock_doc_snapshot.to_dict.return_value = doc_data_from_firestore
          mock_doc_ref.get.return_value = mock_doc_snapshot

          mock_internal_download_gcs.return_value = True

          mock_faiss_index_instance = MagicMock()
          mock_faiss_index_instance.search.side_effect = RuntimeError("Mocked FAISS search error")
          mock_faiss_read_index.return_value = mock_faiss_index_instance

          dummy_metadata_content = {
              "ids": ["doc1", "doc2"],
              "metadata": {"doc1": {"data": "meta1"}, "doc2": {"data": "meta2"}}
          }
          mock_pickle_load.return_value = dummy_metadata_content # Use mock_pickle_load

          mock_opened_file_context_manager = MagicMock()
          mock_opened_file_context_manager.__enter__.return_value = MagicMock()
          mock_opened_file_context_manager.__exit__.return_value = None
          mock_builtin_open.return_value = mock_opened_file_context_manager # Use mock_builtin_open

          result = await query_metadata_faiss(
              agent_context=mock_agent_context,
              index_name=index_name_for_test,
              key="query text",
              top_k=1
          )
          print(f"\nResult dictionary for {request.node.name}: {result}\n")

          assert result is not None, "Result dictionary is None"
          assert result.get("status") == "error", f"Status should be error, was {result.get('status')}. Full result: {result}"
          assert "error_type" in result.get("meta", {}), f"error_type missing in meta. Full result: {result}"
          assert result["meta"]["error_type"] == "FaissSearchError", f"Incorrect error_type for FAISS search failure. Full result: {result}"
          assert "Mocked FAISS search error" in result.get("error", ""), f"Error message mismatch. Full result: {result}"

          mock_faiss_read_index.assert_called_once()
          mock_faiss_index_instance.search.assert_called_once()
          mock_get_embedding.assert_called_once_with(text="query text")

          mock_internal_download_gcs.assert_any_call(mocker.ANY, "test-bucket", f"{index_name_for_test}.faiss", f"/tmp/{index_name_for_test}.faiss")
          mock_internal_download_gcs.assert_any_call(mocker.ANY, "test-bucket", f"{index_name_for_test}.meta", local_meta_path_expected)

          mock_builtin_open.assert_called_once_with(local_meta_path_expected, "rb") # Use mock_builtin_open
          mock_pickle_load.assert_called_once() # Use mock_pickle_load
E       fixture 'mock_pickle_load' not found
>       available fixtures: ADK/agent_data/tests/tools/test_faiss_tools.py::<event_loop>, ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::<event_loop>, ADK/agent_data/tests::<event_loop>, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_env_vars, mock_firestore_client, mock_logging, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/ADK/agent_data/tests/tools/test_faiss_tools.py:714
=================================== FAILURES ===================================
___________ TestSaveMetadataToFaiss.test_save_openai_embedding_error ___________

self = <test_faiss_tools.TestSaveMetadataToFaiss object at 0x105299600>
mock_pickle_dump = <MagicMock name='dump' id='4591862256'>
mock_faiss_write_index = <MagicMock name='write_index' id='4591870272'>
MockFaissIndexFlatL2 = <MagicMock name='IndexFlatL2' id='4591878096'>
mock_get_embedding = <MagicMock name='get_openai_embedding' id='4591902464'>
mock_firestore_constructor = <MagicMock name='Client' id='4591910336'>
mock_upload_with_retry = <MagicMock name='upload_with_retry' id='4591934656'>
mock_storage_client = <MagicMock name='Client' id='4591942528'>
mock_firestore_client = (<MagicMock name='Client()' id='4591758944'>, <MagicMock name='Client().collection().document()' id='4591822416'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x1052ec160>
request = <FixtureRequest for <Function test_save_openai_embedding_error>>

    @patch(f"{SAVE_TOOL_MODULE_PATH}.storage.Client")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.upload_with_retry")
    @patch(FIRESTORE_CLIENT_PATH)
    @patch(f"{SAVE_TOOL_MODULE_PATH}.get_openai_embedding")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.faiss.IndexFlatL2")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.faiss.write_index")
    @patch(f"{SAVE_TOOL_MODULE_PATH}.pickle.dump")
    def test_save_openai_embedding_error(self, mock_pickle_dump, mock_faiss_write_index, MockFaissIndexFlatL2,
                                              mock_get_embedding, mock_firestore_constructor, mock_upload_with_retry,
                                              mock_storage_client, mock_firestore_client, mocker, request):
        from ADK.agent_data.tools.save_metadata_to_faiss_tool import save_metadata_to_faiss
    
        mock_firestore_constructor.return_value = mock_firestore_client[0]
    
        mock_bucket = MagicMock()
        mock_blob = MagicMock()
        mock_storage_client.return_value.bucket.return_value = mock_bucket
        mock_bucket.blob.return_value = mock_blob
    
        mock_index_instance = MockFaissIndexFlatL2.return_value
        mock_index_instance.ntotal = 1 # Configure ntotal
    
        # Simulate get_openai_embedding returning None for the first document, success for the second
        mock_get_embedding.side_effect = [None, np.array([0.2]*10, dtype=np.float32)]
    
        input_metadata = {
            "doc1": {"text": "Text that will cause embedding error"},
            "doc2": {"text": "Another document"}
        }
        input_data = {
            "index_name": "test_openai_error_index",
            "metadata_dict": input_metadata,
            "text_field_to_embed": "text",
            "dimension": 10
        }
    
        result = save_metadata_to_faiss(
            index_name=input_data["index_name"],
            metadata_dict=input_data["metadata_dict"],
            text_field_to_embed=input_data["text_field_to_embed"],
            dimension=input_data["dimension"]
        )
        print(f"\nResult dictionary for {request.node.name}: {result}\n")
        print(f"DEBUG: type of dimension from result: {type(result.get('dimension'))}, repr: {repr(result.get('dimension'))}")
        print(f"DEBUG: type of vector_count from result: {type(result.get('vector_count'))}, repr: {repr(result.get('vector_count'))}")
    
        assert result is not None, "Result dictionary is None"
        assert result.get("status") == "success", "Status should be success even with partial embedding failure"
        assert result.get("vector_count") == 1, "Vector count should be 1 as only one embedding succeeded"
        assert result.get("dimension") == 10, "Dimension should be consistent with successful embeddings"
    
        meta_details = result.get("meta", {})
>       assert meta_details.get("original_docs_count") == 2, "Original docs count mismatch"
E       AssertionError: Original docs count mismatch
E       assert None == 2
E        +  where None = <built-in method get of dict object at 0x111b6f600>('original_docs_count')
E        +    where <built-in method get of dict object at 0x111b6f600> = {}.get

ADK/agent_data/tests/tools/test_faiss_tools.py:331: AssertionError
----------------------------- Captured stdout call -----------------------------

Result dictionary for test_save_openai_embedding_error: {'status': 'success', 'message': "FAISS index 'test_openai_error_index' and metadata saved and uploaded to GCS successfully.", 'index_name': 'test_openai_error_index', 'gcs_bucket': 'test-bucket', 'gcs_faiss_path': 'gs://test-bucket/test_openai_error_index.faiss', 'gcs_meta_path': 'gs://test-bucket/test_openai_error_index.meta', 'vector_count': 1, 'dimension': 10, 'index_type': 'MagicMock', 'duration_seconds': 0.0, 'gcs_upload_status': 'success'}

DEBUG: type of dimension from result: <class 'int'>, repr: 10
DEBUG: type of vector_count from result: <class 'int'>, repr: 1
------------------------------ Captured log call -------------------------------
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:81 vector_data not provided for index 'test_openai_error_index'. Attempting to generate embeddings.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:95 Generating embeddings for 2 documents using field 'text'. Expected dimension: 10.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc1' (text: 'Text that will cause embedding error...').
ERROR    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:139 Failed to generate embedding for doc_id 'doc1' (embedding was None). Skipping.
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:120 Generating embedding for doc_id 'doc2' (text: 'Another document...').
DEBUG    ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:137 Successfully generated embedding for doc_id 'doc2'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:152 Successfully generated 1 embeddings from 1 documents (out of 2 originally).
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:155 Starting validation for index 'test_openai_error_index' with 1 metadata entries and 1 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:184 vector_data is a list. Proceeding with list of vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:252 Validation successful. All 1 processed vectors have dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:257 Converting processed vector data to NumPy array.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:263 Creating FAISS index with actual dimension 10 from vector data.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:272 Number of vectors (1) is less than 20. Using IndexFlatL2.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:274 Created FAISS index (IndexFlatL2) with dimension 10.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:307 Adding 1 vectors to the index in batches.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:311 Adding batch 1/1 with 1 vectors to FAISS index (MagicMock)
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:313 Finished adding vectors. Index now contains 1 vectors.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:315 Saving FAISS index locally to: /tmp/test_openai_error_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:322 Saving metadata locally to: /tmp/test_openai_error_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:327 Attempting to save metadata to Firestore for index: test_openai_error_index in project: test-project
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:349 Successfully saved metadata to Firestore for index: test_openai_error_index
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:356 Attempting to save FAISS index and metadata to GCS Bucket: test-bucket
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:366 Uploading /tmp/test_openai_error_index.faiss to gs://test-bucket/test_openai_error_index.faiss
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:371 Uploading /tmp/test_openai_error_index.meta to gs://test-bucket/test_openai_error_index.meta
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:376 Successfully uploaded FAISS index and metadata for 'test_openai_error_index' to GCS bucket 'test-bucket'.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:381 Registering FAISS index 'test_openai_error_index' in Firestore collection 'faiss_indexes_registry'...
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:400 Successfully registered FAISS index 'test_openai_error_index' in Firestore.
INFO     ADK.agent_data.tools.save_metadata_to_faiss_tool:save_metadata_to_faiss_tool.py:416 Removed temporary local file: /tmp/test_openai_error_index.meta
=============================== warnings summary ===============================
setup/venv/lib/python3.10/site-packages/faiss/loader.py:49
  /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.
    from numpy.core._multiarray_umath import __cpu_features__

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type SwigPyPacked has no __module__ attribute

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type SwigPyObject has no __module__ attribute

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type swigvarlink has no __module__ attribute

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_openai_embedding_error
ERROR ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_faiss_search_error
============== 1 failed, 10 passed, 4 warnings, 1 error in 3.98s ===============
