name: Deploy to Google Cloud Functions
# CLI153.2: Fixed CI for production deployment with proper secret validation
on:
  push:
    branches:
      - main
    paths:
      - 'functions/**'
      - '.github/workflows/deploy_functions.yaml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GitHub Secrets
        id: validate-secrets
        run: |
          echo "üîç Validating GitHub secrets..."
          
          # Check if required secrets exist
          if [ -z "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" ]; then
            echo "‚ùå GCP_WORKLOAD_IDENTITY_PROVIDER secret is missing"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]; then
            echo "‚ùå GCP_SERVICE_ACCOUNT secret is missing"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ -z "${{ secrets.PROJECT_ID }}" ]; then
            echo "‚ùå PROJECT_ID secret is missing"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate service account email format
          if [[ ! "${{ secrets.GCP_SERVICE_ACCOUNT }}" =~ ^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.iam\.gserviceaccount\.com$ ]]; then
            echo "‚ùå GCP_SERVICE_ACCOUNT format is invalid"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All secrets are valid"
          echo "valid=true" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        if: steps.validate-secrets.outputs.valid == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Set up Cloud SDK
        if: steps.validate-secrets.outputs.valid == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Set up Python
        if: steps.validate-secrets.outputs.valid == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Verify Authentication
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          echo "üîê Verifying GCP authentication..."
          gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -1
          echo "üìã Using project: ${{ secrets.PROJECT_ID }}"
          gcloud config set project ${{ secrets.PROJECT_ID }}

      - name: Deploy to Google Cloud Functions
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          set -e
          echo "üöÄ Deploying Cloud Functions..."
          
          if [ ! -d "functions" ]; then
            echo "‚ö†Ô∏è  No functions directory found, skipping deployment"
            exit 0
          fi
          
          for FUNCTION_DIR in $(find functions -mindepth 1 -maxdepth 1 -type d); do
            FUNCTION_NAME=$(basename "$FUNCTION_DIR")
            echo "üì¶ Deploying function: $FUNCTION_NAME"
            
            # Check if main.py exists
            if [ ! -f "$FUNCTION_DIR/main.py" ]; then
              echo "‚ö†Ô∏è  No main.py found in $FUNCTION_DIR, skipping..."
              continue
            fi
            
            # Extract entry point from main.py
            ENTRY_POINT=$(grep -oP 'def \K\w+(?=\(.*\):)' "$FUNCTION_DIR/main.py" | head -n 1)
            if [ -z "$ENTRY_POINT" ]; then
              echo "‚ö†Ô∏è  No entry point found in $FUNCTION_DIR/main.py, skipping..."
              continue
            fi
            
            echo "üéØ Entry point: $ENTRY_POINT"
            
            # Deploy function with retry logic
            for attempt in 1 2 3; do
              echo "üîÑ Deployment attempt $attempt for $FUNCTION_NAME..."
              if gcloud functions deploy "$FUNCTION_NAME" \
                --region=asia-southeast1 \
                --runtime=python310 \
                --trigger-http \
                --allow-unauthenticated \
                --source="$FUNCTION_DIR" \
                --entry-point="$ENTRY_POINT" \
                --project=${{ secrets.PROJECT_ID }} \
                --memory=256MB \
                --timeout=60s; then
                echo "‚úÖ Successfully deployed $FUNCTION_NAME"
                break
              else
                echo "‚ùå Deployment attempt $attempt failed for $FUNCTION_NAME"
                if [ $attempt -eq 3 ]; then
                  echo "‚ùå All deployment attempts failed for $FUNCTION_NAME"
                  exit 1
                fi
                sleep 10
              fi
            done
          done
          
          echo "üéâ All functions deployed successfully!"

      - name: Verify Deployments
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          echo "üîç Verifying function deployments..."
          gcloud functions list --filter="name:*" --format="table(name,status,trigger.httpsTrigger.url)" --project=${{ secrets.PROJECT_ID }}
