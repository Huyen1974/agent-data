name: Deploy Dummy Workflow
# CLI153.2: Fixed CI for production deployment with proper secret validation

on:
  push:
    branches: [main, test]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GitHub Secrets
        id: validate-secrets
        run: |
          echo "üîç Validating GitHub secrets..."
          
          # Check if required secrets exist
                  if [ -z "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" ]; then
          echo "‚ùå GCP_WORKLOAD_IDENTITY_PROVIDER secret is missing"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]; then
            echo "‚ùå GCP_SERVICE_ACCOUNT secret is missing"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Determine project ID based on branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            PROJECT_SECRET="${{ secrets.PROJECT_ID }}"
            PROJECT_NAME="production"
          else
            PROJECT_SECRET="${{ secrets.PROJECT_ID_TEST }}"
            PROJECT_NAME="test"
          fi
          
          if [ -z "$PROJECT_SECRET" ]; then
            echo "‚ùå PROJECT_ID secret is missing for $PROJECT_NAME environment"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate service account email format
          if [[ ! "${{ secrets.GCP_SERVICE_ACCOUNT }}" =~ ^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.iam\.gserviceaccount\.com$ ]]; then
            echo "‚ùå GCP_SERVICE_ACCOUNT format is invalid"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All secrets are valid for $PROJECT_NAME environment"
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "project_id=$PROJECT_SECRET" >> $GITHUB_OUTPUT
          echo "environment=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        if: steps.validate-secrets.outputs.valid == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Set up Cloud SDK
        if: steps.validate-secrets.outputs.valid == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ steps.validate-secrets.outputs.project_id }}

      - name: Verify Authentication
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          echo "üîê Verifying GCP authentication..."
          gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -1
          echo "üìã Using project: ${{ steps.validate-secrets.outputs.project_id }}"
          echo "üåç Environment: ${{ steps.validate-secrets.outputs.environment }}"
          gcloud config set project ${{ steps.validate-secrets.outputs.project_id }}

      - name: Deploy dummy workflow
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          echo "üöÄ Deploying dummy workflow..."
          
          # Check if dummy workflow exists
          if [ ! -f "workflows/dummy_workflow.yaml" ]; then
            echo "‚ö†Ô∏è  No dummy_workflow.yaml found, skipping deployment"
            exit 0
          fi
          
          # Validate workflow file
          if ! python3 -c "import yaml; yaml.safe_load(open('workflows/dummy_workflow.yaml'))" 2>/dev/null; then
            echo "‚ùå Invalid YAML in dummy_workflow.yaml, skipping..."
            exit 1
          fi
          
          # Deploy with retry logic
          for attempt in 1 2 3; do
            echo "üîÑ Deploy attempt $attempt..."
            if gcloud workflows deploy dummy-workflow \
              --source=workflows/dummy_workflow.yaml \
              --location=asia-southeast1 \
              --project=${{ steps.validate-secrets.outputs.project_id }}; then
              echo "‚úÖ Successfully deployed dummy workflow"
              break
            else
              echo "‚ùå Deploy attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All deploy attempts failed"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Verify deployment
        if: steps.validate-secrets.outputs.valid == 'true'
        run: |
          echo "üîç Verifying deployment..."
          gcloud workflows describe dummy-workflow --location=asia-southeast1 --project=${{ steps.validate-secrets.outputs.project_id }} --format="value(name,state)" 