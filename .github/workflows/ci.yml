name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[test]"

      - name: Verify Langroid Installation
        run: |
          python -c "import langroid; from importlib.metadata import version; print(f'Langroid version: {version(\"langroid\")}')"
          python -c "from importlib.metadata import version; assert '0.58' in version('langroid'), f'Expected Langroid 0.58.x, got {version(\"langroid\")}'"

      - name: Run Tests
        run: |
          pytest tests/ -v --cov=agent_data --cov-report=xml --cov-report=term-missing
        env:
          # Mock environment variables for testing
          OPENAI_API_KEY: "mock-key-for-testing"
          LANGROID_API_KEY: "mock-key-for-testing"

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black
        run: black --check agent_data tests
        continue-on-error: true

      - name: Run isort
        run: isort --check-only agent_data tests
        continue-on-error: true

      - name: Run flake8
        run: flake8 agent_data tests
        continue-on-error: true

      - name: Run mypy
        run: mypy agent_data
        continue-on-error: true

  actionlint:
    name: GitHub Actions Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          fail_on_error: false

  trufflehog:
    name: Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.90.0
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
