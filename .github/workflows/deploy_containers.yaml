name: Deploy Containers to Cloud Run
# CLI153.2: Fixed CI for production deployment with proper secret validation

#on:
#  push:
#    branches: [ "main", "test" ]
#    paths:
#      - 'containers/**'
#      - '.github/workflows/deploy_containers.yaml'
#  workflow_dispatch: {}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
        submodules: 'recursive'

    - name: Determine Project ID
      id: get_project
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "project_id=${{ secrets.PROJECT_ID }}" >> $GITHUB_OUTPUT
        else
          echo "project_id=${{ secrets.PROJECT_ID_TEST }}" >> $GITHUB_OUTPUT
        fi

    - name: Authenticate to Google Cloud (WIF)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
        token_format: 'access_token'

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ steps.get_project.outputs.project_id }}

    - name: Verify Authentication
      run: |
        echo "üîê Verifying GCP authentication..."
        gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -1
        echo "üìã Using project: ${{ steps.get_project.outputs.project_id }}"
        gcloud config set project ${{ steps.get_project.outputs.project_id }}

    - name: Create Artifact Registry repository
      run: |
        echo "üì¶ Creating Artifact Registry repository..."
        gcloud artifacts repositories create docker-repo \
          --repository-format=docker \
          --location=asia-southeast1 \
          --description="Docker repository for agent-data containers" \
          --project=${{ steps.get_project.outputs.project_id }} || echo "Repository already exists"

    - name: Configure Docker
      run: |
        echo "üê≥ Configuring Docker authentication..."
        gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

    - name: Build & Push Docker images
      run: |
        set -e
        echo "üöÄ Building and deploying containers..."
        
        if [ ! -d "containers" ]; then
          echo "‚ö†Ô∏è  No containers directory found, skipping deployment"
          exit 0
        fi
        
        for CONTAINER_DIR in $(find containers -mindepth 1 -maxdepth 1 -type d); do
          CONTAINER_NAME=$(basename "$CONTAINER_DIR")
          IMAGE="asia-southeast1-docker.pkg.dev/${{ steps.get_project.outputs.project_id }}/docker-repo/$CONTAINER_NAME:latest"
          
          echo "üì¶ Processing container: $CONTAINER_NAME"
          
          # Check if Dockerfile exists
          if [ ! -f "$CONTAINER_DIR/Dockerfile" ]; then
            echo "‚ö†Ô∏è  No Dockerfile found in $CONTAINER_DIR, skipping..."
            continue
          fi

          # Build with retry logic
          for attempt in 1 2 3; do
            echo "üîÑ Build attempt $attempt for $CONTAINER_NAME..."
            if docker build -t "$IMAGE" "$CONTAINER_DIR"; then
              echo "‚úÖ Successfully built $CONTAINER_NAME"
              break
            else
              echo "‚ùå Build attempt $attempt failed for $CONTAINER_NAME"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All build attempts failed for $CONTAINER_NAME"
                exit 1
              fi
              sleep 10
            fi
          done

          # Push with retry logic
          for attempt in 1 2 3; do
            echo "üîÑ Push attempt $attempt for $CONTAINER_NAME..."
            if docker push "$IMAGE"; then
              echo "‚úÖ Successfully pushed $CONTAINER_NAME"
              break
            else
              echo "‚ùå Push attempt $attempt failed for $CONTAINER_NAME"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All push attempts failed for $CONTAINER_NAME"
                exit 1
              fi
              sleep 10
            fi
          done

          # Deploy to Cloud Run with retry logic
          for attempt in 1 2 3; do
            echo "üîÑ Deploy attempt $attempt for $CONTAINER_NAME..."
            if gcloud run deploy "$CONTAINER_NAME" \
              --image "$IMAGE" \
              --region asia-southeast1 \
              --platform managed \
              --allow-unauthenticated \
              --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
              --memory=512Mi \
              --cpu=1 \
              --min-instances=0 \
              --max-instances=10 \
              --timeout=300 \
              --port=8080 \
              --project=${{ steps.get_project.outputs.project_id }}; then
              echo "‚úÖ Successfully deployed $CONTAINER_NAME to Cloud Run"
              break
            else
              echo "‚ùå Deploy attempt $attempt failed for $CONTAINER_NAME"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All deploy attempts failed for $CONTAINER_NAME"
                exit 1
              fi
              sleep 10
            fi
          done
        done
        
        echo "üéâ All containers deployed successfully!"

    - name: Verify Deployments
      run: |
        echo "üîç Verifying Cloud Run deployments..."
        gcloud run services list --format="table(metadata.name,status.url,status.conditions[0].status)" --project=${{ steps.get_project.outputs.project_id }}
