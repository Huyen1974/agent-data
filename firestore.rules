rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for document_metadata collection - stores document vectorization metadata
    match /document_metadata/{docId} {
      // Allow read and write for authenticated users
      allow read, write: if request.auth != null;

      // Allow service accounts with proper claims
      allow read, write: if request.auth != null
        && request.auth.token.email != null
        && request.auth.token.email.matches('.*@chatgpt-db-project.iam.gserviceaccount.com');

      // Validate document structure for writes
      allow create, update: if request.auth != null
        && validateDocumentMetadata(request.resource.data);
    }

    // Rules for agent_sessions collection - stores agent session memory
    match /agent_sessions/{sessionId} {
      // Allow read and write for authenticated users
      allow read, write: if request.auth != null;

      // Allow service accounts with proper claims
      allow read, write: if request.auth != null
        && request.auth.token.email != null
        && request.auth.token.email.matches('.*@chatgpt-db-project.iam.gserviceaccount.com');

      // Allow users to access their own sessions
      allow read, write: if request.auth != null
        && request.auth.uid == sessionId;

      // Validate session structure for writes
      allow create, update: if request.auth != null
        && validateSessionData(request.resource.data);
    }

    // Rules for agent_data collection - general agent data storage
    match /agent_data/{docId} {
      // Allow read and write for authenticated users
      allow read, write: if request.auth != null;

      // Allow service accounts
      allow read, write: if request.auth != null
        && request.auth.token.email != null
        && request.auth.token.email.matches('.*@chatgpt-db-project.iam.gserviceaccount.com');
    }

    // Default deny rule for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }

  // Helper function to validate document metadata structure
  function validateDocumentMetadata(data) {
    return data.keys().hasAll(['doc_id', 'vectorStatus', 'lastUpdated'])
      && data.doc_id is string
      && data.vectorStatus in ['pending', 'completed', 'failed']
      && data.lastUpdated is string;
  }

  // Helper function to validate session data structure
  function validateSessionData(data) {
    return data.keys().hasAll(['session_id', 'created_at'])
      && data.session_id is string
      && data.created_at is string;
  }
}
