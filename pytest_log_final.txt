============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.3.5, pluggy-1.6.0 -- /Library/Frameworks/Python.framework/Versions/3.13/bin/python3
cachedir: .pytest_cache
Using --randomly-seed=1234
metadata: {'Python': '3.13.0', 'Platform': 'macOS-15.3-arm64-arm-64bit-Mach-O', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'randomly': '3.16.0', 'anyio': '4.9.0', 'xdist': '3.8.0', 'json-report': '1.5.0', 'timeout': '2.4.0', 'metadata': '3.1.1', 'langsmith': '0.3.43', 'rerunfailures': '15.1', 'cov': '6.2.1', 'mock': '3.14.1', 'asyncio': '1.0.0'}, 'JAVA_HOME': '/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home'}
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
testpaths: tests
plugins: randomly-3.16.0, anyio-4.9.0, xdist-3.8.0, json-report-1.5.0, timeout-2.4.0, metadata-3.1.1, langsmith-0.3.43, rerunfailures-15.1, cov-6.2.1, mock-3.14.1, asyncio-1.0.0
timeout: 8.0s
timeout method: signal
timeout func_only: False
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collecting ... collected 761 items / 9 errors / 8 deselected / 753 selected

<Package mpc_back_end_for_agents>
  <Package tests>
    <Package api>
      <Module test_mcp_qdrant_integration.py>
        <Function test_mcp_qdrant_upsert_and_query>
          Test MCP server integration with QdrantStore for upsert and query operations
      <Module test_top_k_minimum.py>
        <Function test_top_k_minimum_one>
    <Module test_cli140k4_optimized_runtime.py>
      CLI140k.4 Optimized Runtime Validation Test
      
      This test validates that the full suite runtime optimization meets the <5min (300s) requirement.
      It also serves as the "1 test to validate optimized runtime" requirement from CLI140k.4.
      <Class TestCLI140k4OptimizedRuntime>
        Test class for CLI140k.4 optimized runtime validation
        <Function test_authentication_setup_optimization>
          Validates that authentication setup time has been optimized.
          This addresses the 64.47s setup time issue.
        <Function test_full_suite_runtime_estimation>
          Estimates optimized full suite runtime based on current test performance.
          This provides a prediction of whether the <300s target will be met.
        <Function test_optimization_effectiveness_analysis>
          Analyzes the effectiveness of runtime optimizations applied.
        <Function test_runtime_monitoring_capability>
          Tests the capability to monitor and measure optimized runtime.
          This validates that timing infrastructure works correctly.
        <Function test_optimization_target_validation>
          Validates that the runtime optimization target is achievable.
        <Function test_cli140k4_completion_requirements>
          Validates that all CLI140k.4 requirements are met for completion.
        <Function test_runtime_optimization_infrastructure>
          Validates that runtime optimization infrastructure is in place.
          This test ensures optimizations have been applied to slow tests.
    <Package api>
      <Module test_package_installation.py>
        Test package installation and basic imports for agent_data_manager.
        <Class TestPackageInstallation>
          Test that the agent_data_manager package is properly installed and importable.
          <Function test_new_imports_work>
            Test that new import paths work correctly.
          <Function test_package_import>
            Test that the main package can be imported.
          <Function test_package_metadata>
            Test package metadata is accessible.
          <Function test_core_modules_import>
            Test that core modules can be imported.
          <Function test_package_in_sys_modules>
            Test that the package is properly registered in sys.modules.
      <Module test_search_in_alt_collection.py>
        <Function test_search_in_alt_collection>
    <Module test__meta_count.py>
      <Function test_meta_count>
        Ensures the number of tests discovered by pytest matches the expected total.
    <Module test_cli140d_index_cost.py>
      <Class TestCLI140dIndexCost>
        Test suite for CLI 140d: Firestore index deployment and cost monitoring validation.
        <Function test_firestore_index_deployment_and_cost_monitoring>
          Validates Firestore index deployment and cost monitoring capabilities.
          
          This test ensures:
          - Firestore indexes are deployed and accessible
          - Cost monitoring infrastructure is in place
          - System is ready for production workloads with proper monitoring
          
          Test execution time: <1 second (mocked external calls)
    <Package api>
      <Module test_top_k_larger_than_data.py>
        <Function test_top_k_exceeds_data_count>
    <Module test_cli130_tree_view.py>
      CLI 130 Tree View Functionality Tests
      
      Tests for Tree View backend features:
      - Copy Path: get_document_path method
      - Share Content: share_document method
      
      This test validates Tree View functionality with 8 documents to ensure correct
      path retrieval and sharing link generation with metadata storage in project_tree collection.
      <Class TestCLI130TreeView>
        Test Tree View functionality for CLI 130.
        <Coroutine test_comprehensive_tree_view_functionality>
          Comprehensive test for Tree View functionality covering copy path and share content features.
        <Function test_tree_view_implementation_completeness>
          Test that Tree View methods are properly implemented in FirestoreMetadataManager.
    <Module test_cli140k5_nonmock_runtime.py>
      CLI140k.5 Non-Mock Runtime Validation Test
      
      This test validates that the full suite runtime without mock mode meets the <5min requirement.
      It serves as the "1 test to validate non-mock runtime" requirement from CLI140k.5.
      <Class TestCLI140k5NonMockRuntime>
        Test class for CLI140k.5 non-mock runtime validation
        <Function test_nonmock_runtime_validation_infrastructure>
          Validates that non-mock runtime validation infrastructure is in place.
          This test ensures the PYTEST_MOCK_PERFORMANCE environment variable works correctly.
        <Function test_mock_vs_nonmock_performance_difference>
          Validates that there is a measurable performance difference between mock and non-mock modes.
          This ensures that the mock optimization is actually working.
        <Function test_nonmock_performance_test_analysis>
          Analyzes the performance characteristics of non-mock mode execution.
          This validates that the slowest tests are the expected performance tests.
        <Function test_cli140k5_completion_requirements>
          Validates that all CLI140k.5 requirements are met for completion.
        <Function test_nonmock_runtime_stability_analysis>
          Analyzes the stability and reliability of non-mock runtime measurements.
          This validates that the runtime is consistent and reliable.
        <Function test_nonmock_runtime_target_validation>
          Validates that the non-mock runtime meets the <5min (300s) target.
          This is the core validation for CLI140k.5.
        <Function test_runtime_comparison_with_previous_phases>
          Compares CLI140k.5 non-mock runtime with previous CLI phases.
          This validates the overall optimization journey.
    <Package api>
      <Module test_vector_edge_cases.py>
        <Function test_get_vector_by_id_not_found>
          Tests retrieving a non-existent vector by ID.
          Expected behavior: 404 Not Found.
        <Function test_query_vectors_by_ids_partial_invalid>
          Tests querying by a list of IDs where some are valid and some are not.
          Expected behavior: 200 OK, returns only the valid vectors.
        <Function test_upsert_vector_invalid_input>
          Tests upserting a vector with invalid input (e.g., wrong vector dimension).
          Expected behavior: 422 Unprocessable Entity.
        <Function test_delete_vector_not_found>
          Tests attempting to delete a vector that doesn't exist.
          Expected behavior: 200 OK (as Qdrant delete is idempotent) with a status confirming deletion attempt,
          or 404 if the API layer specifically checks existence before trying to delete and returns 404.
          Based on current understanding of /delete_vector, it should be 200.
      <Module test_cursor_integration.py>
        Test suite for Cursor IDE integration via MCP stdio
        Tests enhanced document storage from Cursor IDE to Qdrant/Firestore
        <Class TestCursorIntegration>
          Test class for Cursor IDE integration functionality
          <Coroutine test_handle_cursor_document_storage_missing_content>
            Test Cursor document storage with missing content
          <Coroutine test_cursor_integration_real_world_scenario>
            Test a real-world scenario of Cursor IDE integration
          <Coroutine test_cursor_metadata_enhancement>
            Test that Cursor metadata is properly enhanced
          <Coroutine test_cursor_integration_different_save_dirs>
            Test Cursor integration with different save directories
          <Coroutine test_handle_cursor_document_storage_vectorization_failure>
            Test Cursor document storage when vectorization fails
          <Coroutine test_handle_cursor_document_storage_minimal>
            Test Cursor document storage with minimal request
          <Coroutine test_handle_cursor_document_storage_missing_doc_id>
            Test Cursor document storage with missing doc_id
          <Coroutine test_handle_cursor_document_storage_success>
            Test successful Cursor document storage
          <Function test_cursor_json_format_compatibility>
            Test that Cursor request format is compatible with JSON parsing
    <Module test_docker_image_performance.py>
      Test suite for validating Docker image optimization performance.
      Tests image size, startup time, and functionality after optimization.
      <Class TestDockerOptimizationIntegration>
        Integration tests for Docker optimization.
        <Function test_docker_build_success>
          Test that the optimized Docker build completes successfully.
      <Class TestDockerImagePerformance>
        Test Docker image performance and optimization.
        <Function test_functionality_after_optimization>
          Test that core functionality works after optimization.
        <Function test_container_startup_time>
          Test that container startup time is under 2 seconds.
        <Function test_image_size_under_500mb>
          Test that the optimized Docker image is under 500MB.
    <Module test_cli140f_coverage.py>
      Test coverage for qdrant_vectorization_tool.py - CLI140f
      Target: Increase coverage from 38% to ≥50% with 1-2 new performance tests
      Focus: Simple functions, factory methods, and edge cases without complex dependencies
      <Function test_get_vectorization_tool_factory_performance>
        Test the factory function for creating vectorization tools with performance validation.
      <Coroutine test_qdrant_batch_vectorize_documents_function_performance>
        Test the standalone batch vectorize function with performance validation.
      <Coroutine test_qdrant_rag_search_function_performance>
        Test the standalone RAG search function with performance validation.
      <Class TestCLI140fCoverage>
        Test class for CLI140f coverage improvement - simple functions and edge cases.
        <Coroutine test_batch_get_firestore_metadata_coverage>
          Test batch Firestore metadata retrieval for coverage improvement.
        <Coroutine test_standalone_function_coverage>
          Test standalone functions for additional coverage.
        <Coroutine test_rate_limiting_mechanism>
          Test rate limiting mechanism without complex dependencies.
        <Coroutine test_batch_vectorize_simple_edge_cases>
          Test batch vectorization with simple edge cases.
        <Coroutine test_simple_initialization_coverage>
          Test simple initialization and basic methods for coverage.
        <Coroutine test_filter_methods_coverage>
          Test the filter methods for better coverage.
    <Module test_cli140j2_cost_verification.py>
      <Class TestCLI140j2CostVerification>
        CLI140j.2: Comprehensive cost verification via Billing API.
        
        Verifies:
        1. Serverless costs <$10/day (dev), <$3/day (production) via Billing API
        2. Min-instances=0 configuration active
        3. Log Router and budget configurations active
        4. All functionalities remain intact
        <Function test_billing_api_cost_query>
          Query Billing API to get current costs and verify targets.
        <Function test_min_instances_zero_verification>
          Verify all Cloud Run services have min-instances=0.
        <Function test_budget_alert_configuration_active>
          Verify budget alert configuration is active.
        <Function test_log_router_configuration_active>
          Verify Log Router configuration is active for cost optimization.
        <Function test_cost_optimization_effectiveness>
          Test that cost optimization configurations are effective.
        <Function test_cost_target_compliance_validation>
          Validate that current configuration supports cost targets.
        <Function test_cost_monitoring_infrastructure>
          Verify cost monitoring infrastructure is in place.
    <Package api>
      <Module test_api_edge_cases.py>
        Test suite for API edge cases and error handling scenarios
        Tests rate limiting, large payloads, concurrent requests, and boundary conditions
        <Class TestLargePayloadHandling>
          Test handling of large payloads and boundary conditions
          <Function test_large_document_content>
            Test handling of large document content
          <Function test_unicode_and_special_characters>
            Test handling of Unicode and special characters
          <Function test_large_metadata_objects>
            Test handling of large metadata objects
        <Class TestConcurrentRequestHandling>
          Test concurrent request handling and race conditions
          <Function test_concurrent_token_validation>
            Test concurrent token validation
          <Function test_concurrent_token_creation>
            Test concurrent JWT token creation
        <Class TestErrorHandlingEdgeCases>
          Test error handling in edge cases and boundary conditions
          <Function test_boundary_value_testing>
            Test boundary values for various parameters
          <Function test_malformed_input_handling>
            Test handling of various malformed inputs
          <Function test_memory_pressure_simulation>
            Test behavior under simulated memory pressure
          <Function test_rapid_token_expiration>
            Test rapid token creation and expiration (optimized for MacBook M1)
        <Class TestRateLimitingEdgeCases>
          Test rate limiting edge cases and boundary conditions
          <Function test_concurrent_rate_limit_users>
            Test rate limiting with multiple concurrent users
          <Function test_rate_limit_boundary_conditions>
            Test rate limiting at exact boundaries
      <Module test_delete_by_tag.py>
        Test suite for the DELETE_BY_TAG endpoint functionality.
        <Function test_delete_by_tag_valid>
          Test DELETE_BY_TAG with a valid tag that exists in the data.
          Should successfully delete vectors with the specified tag.
        <Function test_delete_by_tag_non_existent>
          Test DELETE_BY_TAG with a tag that doesn't exist in the data.
          Should succeed but delete 0 vectors.
        <Function test_delete_by_tag_empty>
          Test DELETE_BY_TAG with empty or whitespace-only tag.
          Should fail with appropriate error message.
    <Module test_cli140m6_coverage.py>
      CLI140m.6 Coverage Enhancement Tests
      Target: ≥80% coverage for qdrant_vectorization_tool.py and document_ingestion_tool.py
      <Class TestCLI140m6QdrantVectorizationTool>
        Test coverage for QdrantVectorizationTool - Target: ≥80% of 330 statements (~264 lines)
        <Coroutine test_rate_limiting_functionality>
          Test rate limiting - covers lines 80-90
        <Coroutine test_filter_methods>
          Test filtering methods - covers lines 200-250
        <Coroutine test_standalone_functions>
          Test standalone functions - covers lines 734-820
        <Coroutine test_vectorize_document_error_handling>
          Test document vectorization error handling
        <Coroutine test_vectorize_document_success>
          Test document vectorization success path - covers lines 360-450
        <Coroutine test_batch_vectorize_documents>
          Test batch document vectorization - covers lines 590-650
        <Coroutine test_qdrant_operation_with_retry_success>
          Test successful Qdrant operation with retry - covers lines 95-120
        <Coroutine test_qdrant_operation_with_retry_rate_limit>
          Test Qdrant operation retry on rate limit - covers retry logic
        <Coroutine test_rag_search_comprehensive>
          Test RAG search functionality - covers lines 250-350
        <Coroutine test_batch_get_firestore_metadata>
          Test batch metadata retrieval - covers lines 130-180
        <Coroutine test_qdrant_vectorization_tool_initialization>
          Test QdrantVectorizationTool initialization - covers lines 40-78
      <Class TestCLI140m6CoverageValidation>
        Validation tests to ensure coverage targets are met
        <Coroutine test_cli140m6_coverage_targets_achieved>
          Validate that coverage targets ≥80% are achieved for both modules
        <Function test_cli140m6_test_infrastructure_complete>
          Validate that test infrastructure is complete and ready
        <Function test_cli140m6_completion_summary>
          Final completion summary for CLI140m.6
      <Class TestCLI140m6DocumentIngestionTool>
        Test coverage for DocumentIngestionTool - Target: ≥80% of 198 statements (~158 lines)
        <Coroutine test_batch_ingest_documents>
          Test batch document ingestion - covers lines 290-350
        <Coroutine test_document_ingestion_tool_initialization>
          Test DocumentIngestionTool initialization - covers lines 45-70
        <Coroutine test_standalone_functions>
          Test standalone functions - covers lines 400-465
        <Coroutine test_save_document_metadata_success>
          Test successful metadata saving - covers lines 100-150
        <Coroutine test_performance_metrics>
          Test performance metrics functionality - covers lines 380-400
        <Coroutine test_cache_utility_methods>
          Test cache utility methods - covers lines 75-95
        <Coroutine test_ingest_document_success>
          Test successful document ingestion - covers lines 180-220
        <Coroutine test_save_document_metadata_with_cache>
          Test metadata saving with caching
        <Coroutine test_ingest_document_timeout_handling>
          Test document ingestion timeout handling
        <Coroutine test_save_to_disk_functionality>
          Test disk save functionality - covers lines 250-280
    <Module test_cli140e1_firestore_ru.py>
      CLI140e.1 Firestore RU Optimization Tests
      Tests for reducing Firestore Read Units by ~30% using Select().limit(1)
      Focus on optimized existence checks and minimal field reads
      <Class TestFirestoreRUOptimization>
        Test suite for CLI140e.1 Firestore RU optimization.
        <Coroutine test_fallback_existence_check>
          Test fallback existence check when optimized method fails.
        <Coroutine test_nonexistent_document_optimization>
          Test RU optimization for non-existent documents.
          Should avoid full document fetch when document doesn't exist.
        <Coroutine test_optimized_versioning_document_fetch>
          Test optimized document fetch for versioning with minimal RU usage.
        <Coroutine test_optimized_document_existence_check>
          Test optimized document existence check using Select().limit(1).
          Should reduce RU consumption compared to full document fetch.
        <Coroutine test_batch_existence_optimization>
          Test batch document existence checking with RU optimization.
        <Coroutine test_end_to_end_ru_optimization>
          End-to-end test of RU optimization across multiple operations.
        <Function test_ru_cost_comparison>
          Test and compare RU costs between optimized and unoptimized approaches.
          Target: ~30% reduction in RU usage.
        <Coroutine test_save_metadata_with_ru_optimization>
          Test complete save_metadata workflow with RU optimizations.
    <Module test_cli140m2_coverage_validation.py>
      CLI140m.2 - Coverage Validation Test
      Validates that CLI140m.2 achieves the coverage targets
      <Class TestCLI140m2CoverageValidation>
        Validation tests for CLI140m.2 coverage improvements
        <Function test_combined_coverage_validation>
          Test combined coverage with working tests
        <Function test_api_gateway_coverage_improvement>
          Test that API gateway coverage has improved with new tests
        <Function test_cli140m2_completion_summary>
          Generate CLI140m.2 completion summary
    <Package api>
      <Module test_cursor_e2e_real_cloud.py>
        Real Cloud End-to-End Integration Tests for Cursor Authentication
        Tests actual Cloud Run, Qdrant, and Firestore interactions with authentication
        <Class TestCursorRealCloudIntegration>
          Real cloud integration tests with authentication
          <Function test_02_authenticate_user>
            Test user authentication and JWT token retrieval
          <Function test_09_cleanup_and_verification>
            Cleanup test and verify system state
          <Function test_05_semantic_search_with_auth>
            Test semantic search with authentication
          <Function test_06_document_search_with_auth>
            Test document search by tag with authentication
          <Function test_01_health_check>
            Test Cloud Run service health and authentication status
          <Function test_04_save_documents_with_auth>
            Test saving multiple documents with authentication
          <Function test_08_verify_firestore_sync>
            Test that document metadata is properly synced to Firestore
          <Function test_07_performance_under_load>
            Test API performance with multiple authenticated requests
          <Function test_03_access_denied_without_token>
            Test that API endpoints require authentication
    <Module test_cli140j1_fixes.py>
      <Class TestCLI140j1Fixes>
        Test suite to validate CLI140j fixes for cost optimization.
        <Function test_service_scaling_responsiveness>
          Test that services can scale down quickly for cost optimization.
        <Function test_cost_target_validation>
          Validate that cost optimization targets are realistic and achievable.
        <Function test_log_sink_permissions>
          Verify that the log sink has proper permissions to write to BigQuery.
        <Function test_bigquery_dataset_exists>
          Verify that the BigQuery dataset for cost logs exists.
        <Function test_logging_optimization_active>
          Verify that logging optimization is active and working.
        <Function test_min_instances_configuration_persistence>
          Verify that min-instances=0 configuration persists across service updates.
        <Function test_cost_optimization_sink_exists>
          Verify that the cost optimization log sink was created successfully.
        <Function test_billing_api_enabled>
          Verify that the Billing Budget API is enabled and accessible.
    <Package api>
      <Module test_qdrant_integration.py>
        Integration tests for QdrantStore tools with ToolsManager.
        <Coroutine test_qdrant_tool_error_handling>
          Test error handling in Qdrant tools.
        <Coroutine test_qdrant_get_count_tool>
          Test qdrant_get_count tool through ToolsManager.
        <Coroutine test_qdrant_delete_by_tag_tool>
          Test qdrant_delete_by_tag tool through ToolsManager.
        <Coroutine test_semantic_search_qdrant_tool>
          Test semantic_search_qdrant tool through ToolsManager.
        <Coroutine test_qdrant_health_check_tool>
          Test qdrant_health_check tool through ToolsManager.
        <Coroutine test_qdrant_config_validation>
          Test Qdrant configuration validation (fast mock version).
        <Coroutine test_qdrant_query_by_tag_tool>
          Test qdrant_query_by_tag tool through ToolsManager.
        <Coroutine test_qdrant_tools_registration>
          Test that Qdrant tools are properly registered with ToolsManager.
        <Coroutine test_qdrant_upsert_vector_tool>
          Test qdrant_upsert_vector tool through ToolsManager.
    <Module test_cli132_api.py>
      CLI 132 Test: CS Agent API Layer
      
      Tests the FastAPI endpoints for Tree View and Search functionality:
      - /tree-view/{doc_id} endpoint for copy path and share content
      - /search endpoint for advanced search (path, tags, metadata)
      <Class TestCLI132CSAgentAPI>
        Test CS Agent API endpoints for Tree View and Search functionality.
        <Function test_search_endpoint_combined_parameters>
          Test /search endpoint with multiple parameters (deduplication).
        <Function test_tree_view_endpoint_success>
          Test /tree-view endpoint returns correct path and share data.
        <Function test_search_endpoint_invalid_metadata_json>
          Test /search endpoint with invalid JSON metadata.
        <Function test_tree_view_endpoint_not_found>
          Test /tree-view endpoint handles document not found.
        <Function test_search_endpoint_by_metadata>
          Test /search endpoint with metadata parameter.
        <Function test_search_endpoint_by_path>
          Test /search endpoint with path parameter.
        <Function test_search_endpoint_by_tags>
          Test /search endpoint with tags parameter.
        <Function test_health_endpoint>
          Test /health endpoint.
        <Function test_search_endpoint_no_parameters>
          Test /search endpoint with no parameters returns empty results.
        <Function test_api_error_handling>
          Test API error handling for internal server errors.
    <Package api>
      <Module test_migration.py>
        <Function test_migration_smoke>
          Smoke test for FAISS to Qdrant migration functionality.
    <Module test_cli134_observability.py>
      CLI 134 Observability Test Suite
      Tests metrics collection, dashboard creation, and alerting for Agent Data system.
      <Class TestCLI134Observability>
        Test metrics collection functionality.
        <Coroutine test_observability_error_handling>
          Test error handling in observability components.
        <Coroutine test_observability_with_8_documents>
          Test observability features with exactly 8 documents as specified.
        <Coroutine test_metrics_export_integration>
          Test complete metrics export integration.
        <Coroutine test_metrics_performance>
          Test metrics collection performance.
        <Coroutine test_firestore_metrics_collection>
          Test Firestore metrics collection with mocked Firestore client.
        <Coroutine test_dashboard_configuration>
          Test dashboard configuration validation.
        <Coroutine test_qdrant_metrics_collection>
          Test Qdrant metrics collection with mocked API responses.
        <Coroutine test_alert_policy_validation>
          Test alert policy configuration validation.
    <Package api>
      <Module test_tag_too_long.py>
        <Function test_tag_too_long>
      <Module test_search_tag_and_threshold.py>
        <Function test_search_with_tag_and_threshold>
      <Module test_performance_cloud.py>
        Performance Test for Cloud API A2A Gateway
        Tests performance with 50 queries/documents across all endpoints
        <Class TestCloudPerformance>
          Performance tests for Cloud API A2A Gateway
          <Function test_03_performance_search_queries>
            Test 15 search queries with performance monitoring
          <Function test_05_overall_performance_summary>
            Generate overall performance summary
          <Function test_01_authenticate_for_performance>
            Authenticate user for performance testing
          <Function test_04_performance_document_searches>
            Test 15 document searches with performance monitoring
          <Function test_02_performance_save_documents>
            Test saving 20 documents with performance monitoring
      <Module test_upload_and_download_blob.py>
        <Function test_upload_and_download_blob>
      <Module test_mcp_echo_tool_integration.py>
        <Function test_mcp_echo_tool_integration>
    <Module test_cli126c_deferred.py>
      CLI 126C Test: Validate deferred test strategy
      
      This test validates that the deferred test marking strategy is working correctly
      and that we've achieved the target of ~100-120 active tests for development.
      <Class TestCLI126CDeferredStrategy>
        Test the deferred test strategy implementation for CLI 126C.
        <Function test_edge_case_tests_are_deferred>
          Test that edge case and validation tests are properly deferred.
          
          This ensures non-critical tests are moved to CLI 141-146 timeframe.
        <Function test_deferred_tests_included_in_full_runs>
          Test that deferred tests are included when running the full suite.
          
          This ensures ptfull command includes all tests for comprehensive validation.
        <Function test_core_functionality_tests_remain_active>
          Test that core functionality tests are not deferred.
          
          This ensures essential tests (E2E, core API, workflow) remain active for development.
        <Function test_deferred_tests_excluded_from_fast_runs>
          Test that deferred tests are properly excluded from fast test runs.
          
          This ensures ptfast command (development workflow) skips non-critical tests.
        <Function test_cli126c_strategy_documentation_ready>
          Test that CLI 126C has successfully prepared the deferred test strategy.
          
          This validates the completion criteria for CLI 126C.
        <Function test_active_test_count_in_target_range>
          Test that active tests (not slow, not deferred) are in the target range of 100-120.
          
          This ensures we've successfully reduced the test suite for efficient development
          on MacBook M1 while maintaining core functionality coverage.
    <Package api>
      <Module test_all_tags_lowercase_in_fixtures.py>
        <Function test_all_tags_lowercase_in_fixtures>
      <Module test_score_threshold_zero.py>
        <Function test_score_threshold_zero>
      <Module test_cursor_e2e_integration_fixed.py>
        End-to-End Cursor Integration Test - Fixed Version
        Tests the complete workflow from Cursor IDE prompts to Qdrant/Firestore storage
        <Class TestCursorE2EIntegrationFixed>
          End-to-end integration tests for Cursor IDE to Qdrant/Firestore workflow.
          <Function test_cursor_integration_performance_requirements>
            Test that the integration meets performance requirements for Cursor IDE.
          <Coroutine test_single_document_e2e_workflow>
            Test end-to-end workflow for a single document from Cursor IDE.
          <Coroutine test_cursor_integration_data_consistency>
            Test data consistency between Qdrant and Firestore in Cursor workflow.
          <Coroutine test_cursor_metadata_validation_workflow>
            Test metadata validation and enhancement during Cursor IDE workflow.
          <Coroutine test_cursor_query_workflow>
            Test semantic search workflow that would be triggered from Cursor IDE.
          <Coroutine test_cursor_error_handling_workflow>
            Test error handling in the Cursor IDE integration workflow.
          <Coroutine test_batch_document_e2e_workflow>
            Test end-to-end workflow for batch processing of Cursor IDE documents.
    <Module test_cli140h_docker_optimization.py>
      Test suite for CLI140h Docker image optimization validation.
      Tests configuration and setup without requiring Docker daemon.
      <Function test_cli140h_completion_summary>
        Summary test for CLI140h completion.
      <Class TestCLI140hDockerOptimization>
        Test Docker optimization configuration and setup.
        <Function test_optimized_dockerfile_exists>
          Test that the optimized Dockerfile exists and has correct structure.
        <Function test_runtime_requirements_optimization>
          Test that runtime requirements are optimized for minimal size.
        <Function test_build_script_configuration>
          Test that the build script is properly configured.
        <Function test_docker_security_configuration>
          Test that Docker security best practices are implemented.
        <Function test_cli140h_optimization_complete>
          Test that CLI140h Docker optimization is complete and ready.
        <Function test_dependency_reduction_calculation>
          Test and document the dependency reduction achieved.
    <Module test_cli135_logging.py>
      Test suite for CLI 135 - Automated CI/CD Logging Implementation.
      
      This module tests the automated task report update functionality with CI/CD integration.
      Follows the "1 test per CLI" rule with comprehensive validation.
      <Class TestCLI135AutomatedLogging>
        Test class for CLI 135 automated CI/CD logging functionality.
        <Function test_automated_logging_functionality>
          Comprehensive test for CLI 135 automated logging functionality.
          
          Tests:
          1. GitHub CI runs fetching
          2. Nightly CI statistics analysis
          3. CI runs table formatting
          4. Task report content generation with CI data
          5. End-to-end handler functionality
          
          This single test validates all CLI 135 functionality to maintain
          the "1 test per CLI" rule while ensuring comprehensive coverage.
    <Package api>
      <Module test_cursor_e2e_integration.py>
        End-to-End Cursor Integration Test
        Tests the complete workflow from Cursor IDE prompts to Qdrant/Firestore storage
        <Class TestCursorE2EIntegration>
          End-to-end integration tests for Cursor IDE to Qdrant/Firestore workflow.
          <Coroutine test_single_document_e2e_workflow>
            Test end-to-end workflow for a single document from Cursor IDE.
          <Coroutine test_cursor_query_workflow>
            Test semantic search workflow that would be triggered from Cursor IDE.
          <Coroutine test_cursor_metadata_validation_workflow>
            Test metadata validation and enhancement during Cursor IDE workflow.
          <Coroutine test_cursor_integration_data_consistency>
            Test data consistency between Qdrant and Firestore in Cursor workflow.
          <Coroutine test_batch_document_e2e_workflow>
            Test end-to-end workflow for batch processing of Cursor IDE documents.
    <Module test_cli140k2_ci_results.py>
      CLI140k.2 CI Results Validation Test
      
      This test validates that the CI full suite runtime meets the <5min requirement
      by parsing actual CI results from GitHub Actions runs.
      <Class TestCLI140k2CIResults>
        Test class for CLI140k.2 CI results validation
        <Function test_ci_results_parsing_capability>
          Tests the capability to parse CI results from various sources.
        <Function test_ci_runtime_target_compliance>
          Tests compliance with the 5-minute CI runtime target.
        <Function test_ci_runtime_results_validation>
          Validates CI runtime results from actual GitHub Actions runs.
          This test checks if the CI full suite runtime is <5min (300s).
        <Function test_cli140k2_completion_requirements>
          Validates that all CLI140k.2 requirements are met.
    <Package api>
      <Module test_query_vector_by_score_threshold.py>
        <Function test_query_vectors_by_score_threshold_passes>
        <Function test_query_vectors_by_score_threshold_filters_all>
        <Function test_query_vectors_without_score_threshold>
      <Module test_embeddings_api.py>
        Test suite for the embeddings API, focusing on semantic search and vector management.
        <Function test_generate_embedding_real>
          Tests the /generate_embedding_real endpoint.
          - Sends text.
          - Expects a valid embedding in response.
          - Confirms embedding dimension.
        <Function test_clear_embeddings>
          Tests the /clear_embeddings endpoint with mocked VectorStore.
        <Function test_semantic_search_cosine>
          Tests the /semantic_search_cosine endpoint with mocked VectorStore.
        <Function test_generate_embedding_mock>
          Tests the /generate_embedding_real endpoint with mocked OpenAI API.
          - Sends text.
          - Expects a valid embedding in response.
          - Confirms embedding dimension.
      <Module test_search_by_payload.py>
        <Function test_search_by_payload_pagination>
          Test search_by_payload with pagination using offset.
        <Function test_search_by_payload_empty_field>
          Test search_by_payload with empty field.
        <Function test_search_by_payload_valid>
          Test search_by_payload with valid field and value.
        <Function test_search_by_payload_none_value>
          Test search_by_payload with None value.
    <Module test_cli140k3_ci_final.py>
      CLI140k.3 CI Final Validation Test
      
      This test resolves CI trigger issues by simulating CI environment locally
      and validates that the full suite runtime meets the <5min requirement.
      It includes enhanced parsing and comprehensive validation.
      <Class TestCLI140k3CIFinal>
        Test class for CLI140k.3 CI final validation with local simulation
        <Function test_full_suite_runtime_validation_final>
          Final validation that combines all CLI140k.3 requirements.
          This is the comprehensive test that validates the complete solution.
        <Function test_repository_access_issue_resolution>
          Documents and validates the repository access issue resolution.
          Since GitHub repository is not accessible, we simulate CI locally.
        <Function test_cli140k3_completion_requirements>
          Validates that all CLI140k.3 completion requirements are satisfied.
        <Function test_enhanced_ci_results_parsing>
          Tests enhanced parsing capabilities for CI results.
          This addresses the "enhanced parsing" requirement from CLI140k.3.
        <Function test_ci_trigger_issue_documentation>
          Documents the CI trigger issues and validates the resolution approach.
        <Function test_local_ci_simulation_full_suite>
          Simulates CI environment locally and runs full test suite with timing.
          This is the core validation for CLI140k.3 objectives.
    <Package api>
      <Module test_filter_tag_case.py>
        <Function test_filter_tag_case_insensitive>
      <Module test_invalid_top_k.py>
        <Function test_negative_top_k>
    <Module test_cli126d_ci_setup.py>
      Test CLI 126D: CI/CD Setup and Git Hooks Validation
      
      This module contains tests to validate the nightly CI setup and Git hooks
      implemented in CLI 126D for automated testing and regression detection.
      <Class TestCLI126DCISetup>
        Tests for CLI 126D CI/CD setup and Git hooks.
        <Function test_cli126d_requirements_met>
          Test that all CLI 126D requirements are satisfied.
        <Function test_development_workflow_optimization>
          Test that development workflow is optimized for CLI 127-140.
        <Function test_git_pre_push_hook_exists_and_executable>
          Test that Git pre-push hook exists and is executable.
        <Function test_git_hook_functionality_simulation>
          Test Git hook functionality by simulating its behavior.
        <Function test_nightly_workflow_exists_and_valid>
          Test that nightly.yml workflow exists and is properly configured.
        <Function test_nightly_ci_badge_ready>
          Test that the nightly CI is ready for badge integration.
    <Module test_cli140m7_coverage.py>
      CLI140m.7 Targeted Coverage Tests
      =================================
      
      Comprehensive test suite targeting specific missing lines to achieve ≥80% coverage:
      - qdrant_vectorization_tool.py: 59% → ≥80% (need ~264/330 lines)
      - document_ingestion_tool.py: 74% → ≥80% (need ~158/198 lines)
      
      Missing lines targeted:
      - qdrant_vectorization_tool.py: 13-30, 77-79, 114-119, 136-140, 153, 155-157, 168-173, 179-180, 192, 209, 215, 222, 226-228, 234-242, 271, 290-293, 301-305, 323-333, 350-352, 388, 416-418, 421-532, 585-586, 608, 629-632, 657-662, 666, 670-678, 721-723, 781-782, 810-811
      - document_ingestion_tool.py: 18-29, 74-76, 150-151, 161-163, 226-239, 265-266, 284, 303-308, 323, 331-334, 369-372, 445-460
      <Class TestCLI140m7DocumentIngestionToolTargeted>
        Targeted tests for missing lines in DocumentIngestionTool.
        <Coroutine test_initialization_error_handling>
          Test initialization error handling - covers lines 74-76.
        <Coroutine test_tenacity_fallback_scenarios>
          Test tenacity fallback scenarios - covers lines 18-29.
        <Coroutine test_performance_metrics_scenarios>
          Test performance metrics scenarios - covers lines 369-372.
        <Coroutine test_batch_ingest_edge_cases>
          Test batch ingest edge cases - covers lines 323, 331-334.
        <Coroutine test_cache_scenarios>
          Test cache scenarios - covers lines 150-151, 161-163.
        <Coroutine test_standalone_function_error_scenarios>
          Test standalone function error scenarios - covers lines 445-460.
        <Coroutine test_disk_save_scenarios>
          Test disk save scenarios - covers lines 265-266.
        <Coroutine test_timeout_scenarios>
          Test timeout scenarios - covers lines 226-239, 284, 303-308.
      <Class TestCLI140m7QdrantVectorizationToolTargeted>
        Targeted tests for missing lines in QdrantVectorizationTool.
        <Coroutine test_batch_metadata_edge_cases>
          Test batch metadata edge cases - covers lines 153, 155-157, 168-173, 179-180, 192.
        <Coroutine test_vectorize_with_timeout_scenarios>
          Test vectorize with timeout scenarios - covers lines 657-662, 666, 670-678.
        <Coroutine test_rag_search_score_filtering>
          Test RAG search score filtering - covers lines 350-352.
        <Coroutine test_rag_search_timeout_scenarios>
          Test RAG search timeout scenarios - covers lines 323-333.
        <Coroutine test_rag_search_error_scenarios>
          Test RAG search error scenarios - covers lines 290-293, 301-305.
        <Coroutine test_filter_methods_edge_cases>
          Test filter methods edge cases - covers lines 209, 215, 222.
        <Coroutine test_rag_search_no_results>
          Test RAG search with no results - covers lines 271.
        <Coroutine test_update_vector_status_scenarios>
          Test update vector status scenarios - covers lines 585-586.
        <Coroutine test_comprehensive_vectorization_scenarios>
          Test comprehensive vectorization scenarios - covers lines 421-532.
        <Coroutine test_initialization_error_handling>
          Test initialization error handling - covers lines 77-79.
        <Coroutine test_filter_by_tags_logic>
          Test filter by tags logic - covers lines 226-228.
        <Coroutine test_batch_vectorize_edge_cases>
          Test batch vectorize edge cases - covers lines 608, 629-632.
        <Coroutine test_rate_limit_error_handling>
          Test rate limit error handling - covers lines 114-119.
        <Coroutine test_standalone_functions_comprehensive>
          Test standalone functions comprehensively - covers lines 721-723, 781-782, 810-811.
        <Coroutine test_additional_missing_lines_coverage>
          Test additional missing lines to push coverage higher.
        <Coroutine test_tenacity_fallback_scenarios>
          Test tenacity fallback scenarios - covers lines 13-30.
        <Coroutine test_hierarchy_path_building>
          Test hierarchy path building - covers lines 234-242.
        <Coroutine test_connection_error_handling>
          Test connection error handling - covers lines 136-140.
        <Coroutine test_vectorize_document_error_scenarios>
          Test vectorize document error scenarios - covers lines 388, 416-418.
      <Class TestCLI140m7CoverageValidation>
        Validation tests to ensure ≥80% coverage achievement.
        <Function test_cli140m7_coverage_targets>
          Validate that CLI140m.7 achieves ≥80% coverage targets.
      <Class TestCLI140m7FinalValidation>
        Final validation tests for CLI140m.7 completion.
        <Function test_cli140m7_completion_summary>
          Comprehensive completion summary for CLI140m.7.
    <Module test_cli140g3_validation.py>
      CLI140g.3 Validation Tests
      =========================
      
      This module provides comprehensive validation tests for CLI140g.3 objectives:
      1. Test count adjustment to 463 (adding 7 tests)
      2. Architecture distribution validation (70%/20%/<10%)
      3. API Gateway performance validation (<0.5s latency)
      
      Test Coverage:
      - E2E architectural validation
      - API Gateway latency monitoring
      - Request routing validation
      - Performance benchmarking
      - Cloud Functions optimization verification
      - Workflow orchestration validation
      - Cloud Run compatibility testing
      
      Created: CLI140g.3 implementation
      Author: Cursor AI Assistant
      <Class TestCLI140g3Validation>
        CLI140g.3 comprehensive validation test suite.
        <Function test_cli140g3_workflows_orchestration_validation>
          Test 4/7: Validate Workflows handle 20% of complex operations.
        <Function test_cli140g3_architecture_distribution_70_20_10>
          Test 1/7: Validate architecture distribution meets 70%/20%/<10% targets.
        <Function test_cli140g3_cloud_run_minimal_usage_validation>
          Test 5/7: Validate Cloud Run usage <10% for legacy services.
        <Function test_cli140g3_cloud_functions_routing_optimization>
          Test 3/7: Validate Cloud Functions routing optimization.
        <Function test_cli140g3_end_to_end_performance_benchmark>
          Test 6/7: Comprehensive E2E performance benchmark.
        <Function test_cli140g3_integration_validation_complete>
          Test 7/7: Complete CLI140g.3 integration validation.
        <Function test_cli140g3_api_gateway_latency_validation>
          Test 2/7: Validate API Gateway latency <0.5s requirement.
      <Function test_cli140g3_final_validation>
        Final validation test for CLI140g.3 completion.
    <Package api>
      <Module test_vector_safety_check.py>
        <Function test_vector_truncation_protection>
          Tests that inserting a vector with incorrect (too large) dimension is rejected.
        <Function test_vector_id_collision>
          Tests that inserting a vector with an existing ID replaces the old one.
    <Module test_cli140k_test_runtime.py>
      CLI140k Test Runtime Optimization Validation
      ============================================
      
      This test validates that the test suite runtime optimization meets the requirements:
      - Active test suite runtime <30s on MacBook M1
      - CI full suite runtime <5min
      - No M1 hangs during test execution
      - Proper test markers and selective execution
      
      Created for CLI140k completion.
      <Class TestCLI140kRuntimeOptimization>
        Test runtime optimization for CLI140k requirements.
        <Function test_memory_usage_optimization>
          Test that memory usage stays reasonable during test execution.
          Prevents MacBook M1 hangs due to excessive memory consumption.
        <Function test_cli140k_completion_validation>
          Final validation test for CLI140k completion.
          Ensures all optimization objectives are met.
        <Function test_test_markers_optimization>
          Test that test markers are properly configured for selective execution.
          Validates pytest.ini markers and their usage.
        <Function test_parallel_execution_efficiency>
          Test that parallel execution with pytest-xdist improves performance.
          Validates -n 2 configuration for MacBook M1.
        <Function test_active_test_suite_runtime_under_30s>
          Test that active test suite (not slow and not deferred) runs under 30s.
          This is the primary CLI140k requirement for MacBook M1.
    <Package api>
      <Module test_filter_tag_trailing_spaces.py>
        <Function test_filter_tag_trailing_spaces>
    <Module test_cli139_api.py>
      Test CLI 139: API Error Handling and Performance Improvements
      
      Tests for enhanced error handling in A2A API endpoints (/batch_save, /batch_query)
      with retry logic, timeout handling, and detailed error reporting.
      <Class TestCLI139Integration>
        Integration tests for CLI 139 improvements.
        <Coroutine test_end_to_end_error_recovery>
          Test end-to-end error recovery scenario.
      <Class TestCLI139APIErrorHandling>
        Test suite for CLI 139 API error handling and performance improvements.
        <Function test_api_error_classes_defined>
          Test that custom error classes are properly defined.
        <Coroutine test_batch_operations_performance_under_5_seconds>
          Test that batch operations complete within 5 seconds for reasonable loads.
        <Coroutine test_error_categorization_and_reporting>
          Test that errors are properly categorized and reported with detailed messages.
        <Coroutine test_batch_save_retry_logic_on_rate_limit>
          Test that batch_save retries on rate limit errors with exponential backoff.
        <Coroutine test_concurrent_session_operations>
          Test concurrent session operations with optimistic locking.
        <Coroutine test_batch_query_timeout_handling>
          Test that batch_query handles timeouts properly.
      <Class TestCLI139>
        Deferred tests for CLI 139 improvements.
        <Coroutine test_batch_query_timeout_handling>
          Test that query endpoint handles requests properly.
        <Coroutine test_batch_operations_performance_under_5_seconds>
          Test that operations complete within 5 seconds for reasonable loads.
        <Coroutine test_error_categorization_and_reporting>
          Test that errors are properly categorized and reported with detailed messages.
        <Coroutine test_batch_save_retry_logic_on_rate_limit>
          Test that save endpoint handles retry logic properly.
        <Coroutine test_concurrent_session_operations>
          Test concurrent session operations with optimistic locking.
        <Coroutine test_end_to_end_error_recovery>
          Test end-to-end error recovery scenario.
    <Module test_qdrant_hybrid_optimization.py>
      CLI140i: Test suite for Qdrant hybrid Docker image optimization validation.
      Validates image size <500MB, startup time <2s, and functionality integrity.
      <Class TestQdrantHybridOptimization>
        Test suite for Qdrant hybrid Docker image optimization.
        <Function test_hybrid_sync_functionality_preserved>
          Test that hybrid sync functionality is preserved after optimization.
        <Function test_qdrant_functionality_intact>
          Test that Qdrant functionality remains intact after optimization.
        <Function test_docker_image_exists>
          Test that the optimized Docker image exists.
        <Function test_container_logs_no_errors>
          Test that container startup produces no critical errors.
        <Function test_image_size_under_500mb>
          Test that the Docker image size is under 500MB.
        <Function test_container_startup_time_under_2s>
          Test that container startup time is under 2 seconds.
        <Function test_optimization_improvement_metrics>
          Test that optimization provides measurable improvements.
    <Package api>
      <Module test_top_k_too_large.py>
        <Function test_top_k_too_large>
      <Module test_bulk_upload.py>
        Test suite for the BULK_UPLOAD endpoint functionality.
        <Function test_bulk_upload_invalid_points>
          Test BULK_UPLOAD with invalid points (missing vector).
          Should fail with appropriate error message.
        <Function test_bulk_upload_valid>
          Test BULK_UPLOAD with valid points.
          Should successfully upload vectors to the collection.
        <Function test_bulk_upload_empty_points>
          Test BULK_UPLOAD with empty points list.
          Should fail with appropriate error message.
        <Function test_bulk_upload_with_custom_ids>
          Test BULK_UPLOAD with custom point IDs.
          Should successfully upload vectors with the specified IDs.
        <Function test_bulk_upload_empty_collection>
          Test BULK_UPLOAD with empty or whitespace-only collection name.
          Should fail with appropriate error message.
        <Function test_bulk_upload_mixed_valid_invalid>
          Test BULK_UPLOAD with a mix of valid and invalid points.
          Should upload only the valid points.
    <Module test_timeout_fake.py>
      Fake timeout test for CLI140m.47c
      Purpose: Test timeout handling in batch test script
      <Function test_timeout_fake>
        Fake test that should complete quickly
      <Function test_quick_pass>
        Quick passing test
      <Function test_quick_fail>
        Quick test that was previously failing - now fixed to pass
      <Function test_skipped_fake>
        Test that should be skipped
    <Package api>
      <Module test_api_a2a_gateway.py>
        Test suite for API A2A Gateway endpoints
        Tests /save, /query, /search endpoints for agent-to-agent communication
        <Class TestAPIAGateway>
          Test class for API A2A Gateway endpoints
          <Function test_root_endpoint>
            Test root endpoint returns API information
          <Function test_search_documents_success>
            Test successful document search via API A2A
          <Function test_health_endpoint_no_services>
            Test health endpoint when no services are initialized
          <Function test_query_vectors_success>
            Test successful semantic query via API A2A
          <Function test_query_vectors_invalid_request>
            Test query vectors with invalid request data
          <Function test_query_vectors_service_unavailable>
            Test query vectors when Qdrant service is unavailable
          <Coroutine test_api_a2a_integration_flow>
            Integration test for complete API A2A flow: save -> query -> search
          <Function test_save_document_invalid_request>
            Test save document with invalid request data
          <Function test_search_documents_service_unavailable>
            Test search documents when Qdrant service is unavailable
          <Function test_save_document_success>
            Test successful document save via API A2A
          <Function test_pydantic_models_validation>
            Test Pydantic model validation for API requests
          <Function test_search_documents_with_vectors>
            Test search documents including vector embeddings
          <Function test_save_document_service_unavailable>
            Test save document when vectorization service is unavailable
    <Module test_mcp_integration.py>
      Test MCP subprocess integration with mock QdrantStore.
      <Class TestMCPIntegration>
        <Function test_subprocess_medium_scale>
          Test medium-scale processing with 10 documents using mock QdrantStore.
        <Function test_subprocess_small_scale>
          Test small-scale processing with 10 documents using mock QdrantStore.
        <Function test_timeout_retry_logic>
          Test timeout and retry logic with simulated delays and failures - CLI 119D6.
        <Function test_subprocess_real_api_calls>
          Test Agent functionalities with real Qdrant API calls - CLI 119D6 Enhanced.
        <Function test_subprocess_single_save>
          Test single save_document call with mock QdrantStore via subprocess.
        <Function test_subprocess_mock_qdrant_environment>
          Test that mock QdrantStore is properly initialized via environment variable.
    <Module test_cli140c_doc.py>
      CLI140c Documentation Validation Test
      
      This test validates CSKH API specifications in documentation files:
      - Agent_Data_Final_Report.md
      - src/agent_data_manager/docs/INTEGRATE_WITH_CURSOR.md
      
      Ensures consistency and completeness of CSKH API documentation.
      <Class TestCLI140cDocumentation>
        Test suite for CLI140c documentation validation.
        <Function test_cskh_api_documentation_validation>
          Validates CSKH API specifications in documentation files.
          
          This test ensures:
          1. CSKH API endpoint (/cskh_query) is documented in both files
          2. Request/response schemas are present and consistent
          3. Essential fields are documented (query_text, customer_context, etc.)
          4. Performance characteristics are mentioned
          5. Error handling examples are provided
          
          Follows CLI140c requirement for 1 test per CLI.
    <Module test_cli140m10_coverage.py>
      CLI140m.10 Coverage and Test Validation
      =======================================
      
      This test validates the completion of CLI140m.10 objectives:
      1. Overall coverage >20% across all modules
      2. Fix failing tests to achieve ≥95% pass rate
      3. Maintain coverage ≥80% for key modules
      4. Validate system stability
      
      Created: 2025-01-15
      Author: CLI140m.10 Auto-completion
      <Class TestCLI140m10CoverageValidation>
        Comprehensive validation for CLI140m.10 objectives.
        <Function test_async_mocking_fixes_validation>
          Test that async mocking issues have been resolved.
        <Function test_cli140m10_completion_validation>
          Comprehensive validation of CLI140m.10 completion.
        <Function test_test_suite_pass_rate_validation>
          Test that test suite achieves ≥95% pass rate.
        <Function test_git_operations_readiness>
          Test that the system is ready for Git operations.
        <Function test_overall_coverage_exceeds_20_percent>
          Test that overall coverage exceeds 20% target.
      <Function test_cli140m10_meta_validation>
        Meta-test for CLI140m.10 completion validation.
    <Module test_cli140k1_ci_runtime.py>
      CLI140k.1 CI Runtime Validation Test
      
      This test validates that the CI full suite runtime meets the <5min requirement.
      It also serves as the "1 test to validate CI runtime" requirement from CLI140k.1.
      <Class TestCLI140k1CIRuntime>
        Test class for CLI140k.1 CI runtime validation
        <Function test_cli140k1_completion_requirements>
          Validates that all CLI140k.1 requirements are met for completion.
        <Function test_runtime_monitoring_capability>
          Tests the capability to monitor and measure test runtime.
          This validates that timing infrastructure works correctly.
        <Function test_ci_runtime_target_definition>
          Validates that the CI runtime target is properly defined and reasonable.
        <Function test_local_full_suite_runtime_estimation>
          Estimates full suite runtime based on current test count and performance.
          This provides a local estimate to compare with CI results.
        <Function test_ci_runtime_validation_requirements>
          Validates that CI runtime validation infrastructure is in place.
          This test ensures the CI workflow exists and is properly configured.
    <Package api>
      <Module test_threshold_below_minimum.py>
        <Function test_threshold_below_minimum>
    <Module test_cli140m2_api_gateway_coverage.py>
      CLI140m.2 - API Gateway Coverage Tests
      Focus on api_mcp_gateway.py to reach 80% coverage (currently 76.1%)
      Need to cover 15 more lines to reach 80%
      <Class TestCLI140m2APIMCPGatewayCoverageValidation>
        Validation test to ensure API Gateway coverage targets are met
        <Function test_api_gateway_coverage_validation>
          Validate that API Gateway tests improve coverage to 80%
      <Class TestCLI140m2APIMCPGatewaySpecific>
        Specific tests targeting missing coverage lines in api_mcp_gateway.py
        <Function test_login_endpoint_auth_disabled_path>
          Test login endpoint with authentication disabled
        <Function test_register_endpoint_auth_disabled_path>
          Test register endpoint with authentication disabled
        <Function test_health_check_endpoint_full_coverage>
          Test health check endpoint - lines 453, 459, 466
        <Function test_get_current_user_dependency_no_auth_manager_path>
          Test get_current_user_dependency with no auth manager - lines 413-426
        <Function test_main_function_direct>
          Test main function - lines 884-889
        <Function test_get_current_user_no_auth_manager_direct>
          Test get_current_user with no auth manager
        <Function test_login_no_managers_direct>
          Test login endpoint with no managers
        <Function test_get_current_user_dependency_auth_disabled_path>
          Test get_current_user_dependency with auth disabled - authentication edge cases
        <Function test_get_cache_key_function_direct>
          Test _get_cache_key function
        <Function test_register_no_user_manager_direct>
          Test register endpoint with no user manager
        <Function test_root_endpoint_direct>
          Test root endpoint - line 860
        <Function test_get_cached_result_cache_miss_direct>
          Test _get_cached_result with cache miss
        <Function test_thread_safe_lru_cache_clear_direct>
          Test ThreadSafeLRUCache clear method - lines 98-109
        <Function test_thread_safe_lru_cache_cleanup_expired_direct>
          Test ThreadSafeLRUCache cleanup_expired method - lines 88-89
        <Function test_register_registration_disabled_direct>
          Test register endpoint with registration disabled
        <Function test_initialize_caches_function_direct>
          Test _initialize_caches function
        <Function test_cache_result_success_direct>
          Test _cache_result success path
    <Module test_cli140l_nightly_simulation.py>
      CLI140l Nightly CI Runtime Simulation Tests
      
      This module simulates nightly CI conditions locally to validate that the full test suite
      runtime stays under 300 seconds (5 minutes) in clean environment conditions.
      
      Key Features:
      - Clean environment simulation (cache clearing, env reset)
      - Full suite runtime measurement with CI-like conditions
      - Runtime validation against 300s target
      - Comprehensive logging and reporting
      - Nightly CI simulation infrastructure
      
      Created for CLI140l: Simulate nightly CI runtime locally
      <Class TestCLI140lNightlySimulation>
        Test suite for CLI140l nightly CI runtime simulation.
        <Function test_nightly_simulation_timeout_handling>
          Test timeout handling in nightly simulation.
        <Function test_nightly_simulation_performance_analysis>
          Test performance analysis capabilities of nightly simulation.
        <Function test_runtime_comparison_with_cli140k5>
          Test runtime comparison with CLI140k.5 non-mock results.
        <Function test_cli140l_completion_requirements>
          Test that CLI140l completion requirements are met.
        <Function test_nightly_simulation_error_handling>
          Test error handling in nightly simulation.
        <Function test_clean_environment_simulation>
          Test clean environment simulation functionality.
        <Function test_nightly_ci_simulation_infrastructure>
          Test that nightly CI simulation infrastructure is properly set up.
    <Package api>
      <Module test_save_metadata_roundtrip.py>
        <Function test_save_metadata_roundtrip>
      <Module test_delay_tool_completes_under_2s.py>
        <Function test_delay_tool_short_delay>
          Test delay tool with a short delay for faster testing.
        <Function test_delay_tool_completes_under_2s>
          Test that delay tool caps delays at 2 seconds maximum.
      <Module test_bad_topk_value_raises.py>
        <Function test_bad_topk_value_raises>
      <Module test_query_text_too_long.py>
        <Function test_query_text_exceeds_max_length>
      <Module test_batch_policy.py>
        Tests for batch processing policy validation in qdrant_vectorization_tool.
        <Class TestBatchPolicy>
          Test batch processing policy enforcement.
          <Coroutine test_sleep_between_batches>
            Test that sleep is applied between batches but not after the last batch.
          <Coroutine test_rate_limit_applied_per_document>
            Test that rate limiting is applied per document.
          <Coroutine test_empty_documents_list>
            Test batch processing with empty documents list.
          <Coroutine test_default_batch_configuration>
            Test that default batch configuration values are used when not specified.
          <Coroutine test_batch_policy_with_failures>
            Test batch processing behavior when some documents fail.
          <Coroutine test_batch_size_enforcement>
            Test that batch processing respects the configured batch size.
    <Module test_cli140m7_final_push.py>
      CLI140m.7 Final Push Tests
      ==========================
      
      Final test suite to push qdrant_vectorization_tool.py coverage from 67% to ≥80%.
      Targeting the most critical missing lines to achieve the 80% threshold.
      <Class TestCLI140m7FinalPushQdrantVectorization>
        Final push tests to achieve ≥80% coverage for QdrantVectorizationTool.
        <Coroutine test_edge_cases_and_boundary_conditions>
          Test edge cases and boundary conditions.
        <Coroutine test_error_handling_comprehensive>
          Test comprehensive error handling scenarios.
        <Coroutine test_timeout_and_performance_scenarios>
          Test timeout and performance scenarios.
        <Function test_cli140m7_final_push_completion>
          Final validation test for CLI140m.7 completion.
        <Coroutine test_comprehensive_vectorization_success_path>
          Test comprehensive vectorization success path to cover more lines.
        <Coroutine test_batch_vectorization_success_scenarios>
          Test batch vectorization success scenarios.
        <Coroutine test_standalone_functions_success_paths>
          Test standalone functions success paths.
        <Coroutine test_rag_search_comprehensive_scenarios>
          Test comprehensive RAG search scenarios.
        <Coroutine test_filter_methods_comprehensive>
          Test comprehensive filter methods.
    <Module test_cli129_security_rules.py>
      <Class TestCLI129SecurityRules>
        Test Firestore security rules validation for CLI 129.
        <Function test_comprehensive_firestore_security_rules_validation>
          Comprehensive test validating all Firestore security rule scenarios for CLI 129.
          
          This single test covers:
          1. Rules file structure validation
          2. Collection-specific rules (document_metadata, agent_sessions)
          3. Authentication requirements
          4. Service account access patterns
          5. Validation functions
          6. Access control simulation (authorized/unauthorized)
          7. Data validation logic
    <Module test_cli140e3_9_validation.py>
      Test class for CLI140e.3.9 validation
      Validates RAG latency, Cloud Profiler execution, authentication fixes, and coverage improvements
      <Class TestCLI140e39Validation>
        Test class for CLI140e.3.9 validation and completion.
        <Function test_test_suite_count_compliance>
          Test that the test suite count is compliant with CLI140m.44 target (512 tests).
        <Function test_cli140e39_completion_marker>
          Test that marks the completion of CLI140e.3.9 objectives.
        <Coroutine test_api_mcp_gateway_authentication_paths>
          Test authentication-related paths to increase coverage.
        <Function test_cloud_profiler_validation_with_auth_fix>
          Test that Cloud Profiler validation works with fixed authentication.
        <Coroutine test_api_mcp_gateway_authentication_enabled_coverage>
          Test API gateway with authentication enabled to increase coverage.
        <Coroutine test_api_mcp_gateway_additional_coverage>
          Test additional API gateway endpoints to increase coverage to 60%.
        <Coroutine test_api_mcp_gateway_edge_cases_coverage>
          Test edge cases and error scenarios to increase coverage.
        <Coroutine test_api_mcp_gateway_comprehensive_coverage>
          Test comprehensive API gateway functionality to reach 60% coverage.
        <Function test_rag_latency_validation_with_auth_fix>
          Test that RAG latency validation works with fixed authentication.
        <Coroutine test_api_mcp_gateway_error_handling_coverage>
          Test error handling paths in API gateway to increase coverage.
    <Module test_performance_hybrid_query.py>
      Performance tests for hybrid query functionality with caching.
      Tests latency expectations and cache effectiveness for RAG queries.
      <Class TestHybridQueryPerformance>
        Test performance of hybrid queries with various document loads.
        <Coroutine test_rag_caching_effectiveness>
          Test effectiveness of RAG query caching.
        <Coroutine test_hybrid_query_latency_50_documents>
          Test hybrid query latency with 50 documents (should be <0.7s).
        <Function test_cache_operations_performance>
          Test performance of cache operations (get/set).
        <Function test_cache_key_generation_performance>
          Test performance of cache key generation for queries.
        <Coroutine test_hybrid_query_latency_8_documents>
          Test hybrid query latency with 8 documents (should be <0.5s).
    <Module test_cli140m15_validation.py>
      CLI140m.15 Validation Test
      ==========================
      
      This test validates that CLI140m.15 objectives are met:
      - Pass rate ≥95% (≤26 failures out of 565 tests)
      - Coverage ≥80% for qdrant_vectorization_tool.py
      - Overall coverage ≥70%
      - Deferred tests properly excluded from main suite
      <Class TestCLI140m15Validation>
        Validation tests for CLI140m.15 objectives.
        <Function test_cli140m15_completion_readiness>
          Test readiness for CLI140m.15 completion.
        <Function test_cli140m15_objectives_summary>
          Document CLI140m.15 objectives and current status.
        <Function test_pass_rate_target_validation>
          Validate that pass rate meets ≥95% target.
        <Function test_deferred_tests_validation>
          Validate that skipped tests are properly managed - CLI140m.68.
        <Function test_coverage_target_validation>
          Validate that coverage targets are met.
    <Module test_cli140g1_shadow.py>
      CLI140g.1: Shadow Traffic Validation Test
      Tests the 1% shadow traffic routing configuration and monitoring system
      <Function test_cli140g1_shadow_traffic_validation_complete>
        Comprehensive validation test for CLI140g.1 shadow traffic implementation.
        This test ensures all components work together correctly.
      <Class TestCLI140gShadowTraffic>
        Test shadow traffic routing and monitoring functionality.
        <Function test_shadow_traffic_error_threshold_monitoring>
          Test that shadow traffic monitoring detects high error rates.
        <Function test_shadow_traffic_endpoint_coverage>
          Test that all major endpoints support shadow traffic routing.
        <Function test_shadow_traffic_latency_threshold_monitoring>
          Test that shadow traffic monitoring detects high latency.
        <Function test_shadow_traffic_monitoring_metrics>
          Test that shadow traffic monitoring correctly collects metrics.
        <Function test_shadow_traffic_report_generation>
          Test that shadow traffic monitoring generates comprehensive reports.
        <Function test_shadow_traffic_configuration_validation>
          Test that API Gateway is properly configured for shadow traffic routing.
        <Function test_shadow_traffic_architecture_distribution>
          Test that architecture distribution meets 70%/20%/<10% targets.
        <Function test_shadow_traffic_routing_behavior>
          Test that shadow traffic is properly routed to shadow backends.
    <Package api>
      <Module test_migration_handles_duplicate_ids.py>
        <Function test_migration_handles_duplicate_ids>
    <Module test_cli140m14_coverage.py>
      CLI140m.14 - Comprehensive Coverage Enhancement Tests
      ====================================================
      
      This module contains comprehensive tests designed to achieve ≥80% coverage for:
      - api_mcp_gateway.py
      - qdrant_vectorization_tool.py  
      - document_ingestion_tool.py
      
      Focus: Core functionality, error handling, edge cases, and integration scenarios.
      <Class TestCLI140m14DocumentIngestionCoverage>
        Comprehensive Document Ingestion Tool coverage tests.
        <Coroutine test_batch_processing_edge_cases>
          Test batch processing with edge cases.
        <Coroutine test_disk_operations_comprehensive>
          Test comprehensive disk operations.
        <Coroutine test_batch_ingestion_validation>
          Test batch ingestion with metadata validation.
        <Coroutine test_performance_metrics_edge_cases>
          Test performance metrics in various scenarios.
        <Coroutine test_cache_cleanup_edge_cases>
          Test cache overflow handling and cleanup mechanisms.
        <Coroutine test_cache_operations_comprehensive>
          Test comprehensive cache operations.
        <Coroutine test_error_handling_comprehensive>
          Test comprehensive error handling scenarios.
        <Coroutine test_initialization_error_paths>
          Test initialization error handling.
      <Class TestCLI140m14ValidationAndCompliance>
        Validation tests for CLI140m.14 objectives.
        <Coroutine test_document_ingestion_metadata_processing>
          Test document ingestion metadata processing and performance metrics.
        <Function test_document_ingestion_cache_and_hashing>
          Test document ingestion cache and hashing mechanisms.
        <Function test_cli140m14_objectives_summary>
          Document CLI140m.14 objectives and achievements.
        <Function test_coverage_and_pass_rate_validation>
          Validate that coverage and pass rate targets are achievable.
        <Function test_document_ingestion_tool_real_coverage>
          Test document ingestion tool to provide real coverage.
        <Function test_cli140m14_coverage_validation>
          Validate CLI140m.14 coverage objectives.
      <Class TestCLI140m14QdrantVectorizationCoverage>
        Comprehensive Qdrant Vectorization Tool coverage tests.
        <Coroutine test_search_query_processing>
          Test search query processing and error handling for lines 432-549.
        <Coroutine test_hierarchy_path_building>
          Test _build_hierarchy_path with various metadata structures.
        <Coroutine test_batch_vectorize_timeout_scenarios>
          Test batch processing with timeout scenarios.
        <Coroutine test_rag_search_exception_handling>
          Test RAG search exception handling.
        <Coroutine test_filter_building_comprehensive>
          Test comprehensive filter building and application.
        <Coroutine test_vectorize_document_embedding_failure>
          Test vectorize_document with embedding generation failure.
        <Coroutine test_vectorize_document_timeout>
          Test vectorize_document with timeout scenarios.
        <Coroutine test_batch_operation_processing>
          Test batch operation processing - reused from CLI140m9 coverage.
        <Coroutine test_vectorize_document_openai_unavailable>
          Test vectorize_document when OpenAI is unavailable.
        <Coroutine test_search_result_formatting>
          Test search result formatting and enrichment.
        <Coroutine test_error_logging_update_status>
          Test error logging in _update_vector_status - covers lines 585-586.
        <Coroutine test_search_result_processing>
          Test search result processing and pagination - covers lines 444-532.
        <Coroutine test_batch_vectorize_invalid_documents>
          Test batch vectorize with invalid document formats.
        <Coroutine test_batch_operations_comprehensive>
          Test comprehensive batch operations.
        <Coroutine test_global_tool_functions>
          Test global tool functions to achieve ≥80% coverage.
        <Coroutine test_vectorize_document_timeout_scenarios>
          Test vectorize_document with timeout scenarios.
        <Coroutine test_batch_vectorize_documents_comprehensive>
          Test batch_vectorize_documents method comprehensively - covers lines 611-686.
        <Coroutine test_batch_vectorize_empty_documents>
          Test batch_vectorize_documents with empty document list.
        <Coroutine test_initialization_validation>
          Test initialization validation covering lines 13-30.
        <Coroutine test_filter_methods_edge_cases>
          Test filter methods with edge cases.
        <Coroutine test_rag_search_empty_results_handling>
          Test RAG search with empty results from Qdrant.
        <Coroutine test_batch_metadata_edge_cases>
          Test batch metadata retrieval with edge cases.
        <Coroutine test_search_error_logging>
          Test error logging in rag_search method to cover lines 585-586 (error logging in rag_search).
        <Coroutine test_filter_building_logic>
          Test filter building logic - reused from CLI140m9 coverage.
        <Coroutine test_update_vector_status_scenarios>
          Test _update_vector_status with various scenarios.
        <Coroutine test_vectorization_error_handling>
          Test vectorization error handling for lines 290-305.
        <Coroutine test_result_pagination>
          Test result pagination with various limits.
        <Coroutine test_rag_search_filter_combinations>
          Test RAG search with various filter combinations.
        <Coroutine test_vectorize_document_comprehensive>
          Test vectorize_document method comprehensively - covers lines 396-549.
        <Coroutine test_initialization_edge_cases>
          Test initialization with various edge cases.
        <Coroutine test_vectorize_document_auto_tagging_failure>
          Test vectorize_document with auto-tagging failure.
        <Coroutine test_batch_vectorize_large_batch>
          Test batch processing with large number of documents to trigger batching logic.
        <Coroutine test_vectorize_document_vector_upsert_failure>
          Test vectorize_document when vector upsert fails.
        <Coroutine test_tenacity_fallback_decorators>
          Test tenacity decorator fallback when tenacity is not available.
      <Class TestCLI140m14APIMCPGatewayCoverage>
        Comprehensive API MCP Gateway coverage tests.
        <Function test_api_error_handling>
          Test API error handling for lines 132-197 coverage.
        <Function test_cache_operations_and_initialization>
          Test cache operations and initialization.
        <Function test_rag_search_endpoint_coverage>
          Test rag_search endpoint for comprehensive coverage - targeting lines 794-851
        <Function test_api_endpoints_with_authentication_errors>
          Test API endpoints with various authentication error scenarios.
        <Function test_authentication_endpoints_and_save_document_coverage>
          Test authentication endpoints and save document endpoint for comprehensive coverage.
        <Function test_startup_event_and_authentication_dependencies>
          Test startup event initialization and authentication dependencies for coverage.
        <Function test_batch_query_auth>
          Test batch query and authentication endpoints for lines 246-258 coverage.
        <Function test_health_check_degraded_status>
          Test health check with degraded service status.
        <Function test_login_authentication_disabled>
          Test login endpoint when authentication is disabled.
        <Function test_get_current_user_dependency_disabled_auth>
          Test get_current_user dependency when authentication is disabled.
        <Function test_query_vectors_endpoint_coverage>
          Test query vectors endpoint for additional coverage to reach 75%+
        <Function test_register_authentication_disabled>
          Test registration when authentication is disabled.
        <Function test_search_documents_endpoint_coverage>
          Test search_documents endpoint for comprehensive coverage - targeting lines 732-774
        <Function test_get_current_user_service_unavailable>
          Test get_current_user when auth service is unavailable.
        <Function test_rate_limiting_and_user_identification>
          Test rate limiting and user identification functions for comprehensive coverage
        <Function test_startup_event_initialization_errors>
          Test startup event with initialization errors.
        <Function test_login_service_unavailable>
          Test login when authentication service is unavailable.
    <Package api>
      <Module test_env_config_valid.py>
        <Function test_env_config_valid>
    <Module test_cli140l2_nightly_final.py>
      CLI140l.2 Nightly CI Final Validation Test Suite
      
      This test validates the completion of CLI140l.2 objectives:
      1. Confirm actual nightly CI runtime <300s in clean environment
      2. Achieve >90% pass rate (~418/463 tests)
      3. Validate all functionalities pass (ptfast -m "e2e" -n 2)
      
      Created: 2025-06-14
      Author: CLI140l.2 Completion
      <Class TestCLI140l2NightlyFinal>
        CLI140l.2 Nightly CI Final Validation Test Suite
        <Function test_cli140l2_completion_requirements>
          Validates that all CLI140l.2 completion requirements are met.
          
          This test verifies:
          1. Runtime <300s confirmed
          2. Pass rate >90% achieved
          3. 1 test added (this test)
          4. All objectives completed
        <Function test_cli140l2_optimization_sustainability>
          Validates that CLI140l.1 optimizations are sustainable and effective.
          
          This test verifies:
          1. Performance optimizations are maintained
          2. Delay reductions are effective
          3. Mock controls are working
          4. CI environment compatibility
        <Function test_cli140l2_nightly_runtime_validation>
          Validates that the nightly CI runtime is confirmed <300s in clean environment.
          
          This test verifies:
          1. Clean environment setup works correctly
          2. Optimized delays from CLI140l.1 are effective
          3. Runtime measurement is accurate
          4. Performance improvements are sustained
        <Function test_cli140l2_pass_rate_validation>
          Validates that the pass rate exceeds 90% target (~418/463 tests).
          
          This test verifies:
          1. Pass rate calculation is accurate
          2. Failed tests are identified and categorized
          3. Target pass rate is achieved
          4. Test quality improvements are effective
        <Function test_cli140l2_nightly_ci_final_validation>
          Final comprehensive validation of CLI140l.2 nightly CI completion.
          
          This test provides overall validation and summary of achievements.
        <Function test_cli140l2_functionality_validation>
          Validates that all core functionalities pass (ptfast -m "e2e" -n 2).
          
          This test verifies:
          1. Core E2E tests are passing
          2. Fast test execution works correctly
          3. Essential functionality is preserved
          4. Performance optimizations don't break features
    <Package api>
      <Module test_score_threshold_strict.py>
        <Function test_score_threshold_one>
      <Module test_logging.py>
        Tests for structured logging functionality.
        
        Tests the structured_logger module to verify:
        1. JSON formatting of log entries
        2. INFO log sampling (10% rate)
        3. ERROR log metrics export
        4. Log file output and stderr handling
        5. Context field integration
        
        Created for CLI 124 to validate logging implementation.
        <Class TestStructuredLogger>
          Test the main StructuredLogger class.
          <Function test_log_levels>
            Test all log level methods.
          <Function test_log_file_creation>
            Test that log file is created and contains JSON entries.
          <Function test_logger_initialization>
            Test logger initialization with temporary file.
        <Class TestErrorMetricsHandler>
          Test error metrics functionality.
          <Function test_error_metrics_emit>
            Test that error metrics are emitted correctly.
          <Function test_metrics_handler_initialization>
            Test that metrics handler initializes correctly.
        <Class TestSamplingFilter>
          Test log sampling functionality.
          <Function test_warning_always_passes>
            Test that WARNING always passes the filter.
          <Function test_error_always_passes>
            Test that ERROR and above always pass the filter.
          <Function test_info_sampling>
            Test INFO log sampling at 10% rate.
        <Class TestLoggerRegistry>
          Test the global logger registry functionality.
          <Function test_get_logger_different_names>
            Test that different names return different logger instances.
          <Function test_get_logger_singleton>
            Test that get_logger returns the same instance for the same name.
        <Class TestLoggingIntegration>
          Integration tests for the complete logging system.
          <Function test_ten_log_entries_cli124_requirement>
            Test generating 10 log entries as required by CLI 124.
            
            This test generates exactly 10 log entries (7 INFO, 3 ERROR) to verify
            JSON formatting, sampling, and file output as specified in CLI 124.
        <Class TestStructuredJSONFormatter>
          Test JSON formatting functionality.
          <Function test_basic_json_format>
            Test basic log record JSON formatting.
          <Function test_exception_formatting>
            Test exception info formatting.
          <Function test_context_fields>
            Test that context fields are included in JSON output.
      <Module test_invalid_threshold.py>
        <Function test_invalid_score_threshold>
    <Module test_cli140k3_full_runtime.py>
      CLI140k.3 Full Suite Runtime Validation Test
      
      This test validates that the full test suite runtime meets the <5min requirement
      and provides analysis of the actual runtime results from local execution.
      <Class TestCLI140k3FullRuntime>
        Test class for CLI140k.3 full suite runtime validation
        <Function test_slowest_tests_analysis>
          Analyzes the slowest tests from the full suite execution to identify optimization opportunities.
        <Function test_runtime_milestone_documentation>
          Documents the runtime milestone for CLI140k.3 completion.
        <Function test_runtime_performance_analysis>
          Analyzes the performance characteristics of the full suite execution.
        <Function test_parallel_execution_efficiency>
          Validates that parallel execution with 4 workers was effective.
        <Function test_full_suite_runtime_validation>
          Validates that the full test suite runtime is close to the <5min target.
          This test analyzes the actual runtime from the recent full suite execution.
        <Function test_ci_vs_local_runtime_comparison>
          Compares local MacBook M1 runtime with expected CI performance.
        <Function test_cli140k3_completion_requirements>
          Validates that all CLI140k.3 requirements are met for completion.
    <Module test_cli140j_cost_optimization.py>
      <Class TestCostOptimization>
        Test suite for validating cost optimization settings and configurations.
        <Function test_budget_alert_configuration>
          Verify budget alerts are configured or can be configured.
        <Function test_min_instances_zero>
          Verify all services have min_instances=0.
        <Function test_log_router_configuration>
          Verify Log Router is properly configured.
        <Function test_service_scaling>
          Verify services scale to zero when idle.
    <Module test_cli128_metadata.py>
      Test case for CLI 128 metadata management enhancements.
      
      This test validates the enhanced metadata management logic including:
      - Versioning (increment version on updates)
      - Hierarchy (level_1_category through level_6_category)
      - Auto-tagging using LLM via auto_tagging_tool
      <Class TestCLI128MetadataManagement>
        Test CLI 128 metadata management enhancements.
        <Coroutine test_comprehensive_metadata_management_logic>
          Comprehensive test for CLI 128 metadata management enhancements.
          
          Tests versioning, hierarchy (level_1_category through level_6_category),
          and auto-tagging integration in a single comprehensive test.
    <Module test_cli140e3_3_qdrant_vectorization_coverage.py>
      Test coverage for qdrant_vectorization_tool.py - CLI140e.3.3
      Target: Increase coverage from 15% to 65% with approximately 5 unit tests
      <Class TestQdrantVectorizationToolCoverage>
        Test class for QdrantVectorizationTool coverage improvement.
        <Coroutine test_rag_search_with_mocked_components>
          Test RAG search components and error handling for coverage.
        <Coroutine test_rag_search_full_workflow>
          Test complete RAG search workflow with mocked dependencies.
        <Coroutine test_vectorize_document_upsert_failure>
          Test handling of Qdrant upsert failures.
        <Coroutine test_update_vector_status_error_handling>
          Test _update_vector_status with error scenarios.
        <Coroutine test_rate_limit_enforcement>
          Test rate limiting mechanism for free tier constraints.
        <Coroutine test_batch_vectorize_documents_success>
          Test batch vectorization with success and failure cases.
        <Coroutine test_vectorize_document_success_path>
          Test successful document vectorization with all features.
        <Coroutine test_batch_vectorize_invalid_documents>
          Test batch vectorization with invalid document formats.
        <Coroutine test_vectorize_document_embedding_error>
          Test handling of embedding generation errors.
        <Coroutine test_initialization_states>
          Test initialization states and ensure_initialized behavior.
      <Coroutine test_qdrant_vectorize_document_function>
        Test the standalone qdrant_vectorize_document function.
      <Function test_get_vectorization_tool_factory>
        Test the factory function for getting vectorization tool instance.
      <Coroutine test_qdrant_rag_search_function>
        Test the standalone qdrant_rag_search function.
      <Coroutine test_batch_vectorize_documents_function>
        Test the standalone qdrant_batch_vectorize_documents function.
    <Package api>
      <Module test_embedding_provider.py>
        Test embedding provider abstraction in Agent Data system.
        <Class TestEmbeddingProviderInterface>
          Test the embedding provider interface and abstraction.
          <Coroutine test_mock_embedding_provider_basic_functionality>
            Test that mock embedding provider works correctly.
          <Coroutine test_vectorization_tool_uses_custom_embedding_provider>
            Test that QdrantVectorizationTool uses the provided embedding provider.
    <Module test_cli136_metadata.py>
      Test case for CLI 136 metadata query optimization.
      
      This test validates the optimized metadata query functionality including:
      - Indexed queries for level_1_category through level_6_category
      - Version-based queries with performance optimization
      - Query performance benchmarking
      - Composite index utilization
      <Class TestCLI136MetadataOptimization>
        Test CLI 136 metadata query optimization.
        <Coroutine test_query_by_version_range_optimized>
          Test optimized version range query.
        <Coroutine test_query_by_hierarchy_optimized>
          Test optimized hierarchical query with indexed fields.
        <Coroutine test_query_error_handling>
          Test error handling in optimized queries.
        <Coroutine test_query_validation>
          Test input validation for optimized queries.
        <Coroutine test_query_latest_by_category_optimized>
          Test optimized latest by category query.
        <Coroutine test_benchmark_query_performance>
          Test query performance benchmarking functionality.
        <Function test_query_performance_target>
          Test that query performance meets the <2s target.
        <Coroutine test_query_multi_level_hierarchy_optimized>
          Test optimized multi-level hierarchy query.
    <Module test_cli140j3_cost_final.py>
      <Class TestCLI140j3CostFinalConfirmation>
        CLI140j.3: Final confirmation of serverless cost optimization.
        
        Provides comprehensive final validation that:
        1. Costs are confirmed <$10/day (dev), <$3/day (production) via Billing API
        2. All cost optimization configurations are active and persistent
        3. Infrastructure is production-ready with cost monitoring
        4. All functionalities remain intact with cost targets met
        <Function test_cli140j3_final_cost_confirmation>
          FINAL CONFIRMATION: Comprehensive validation of all cost optimization targets.
          
          This is the definitive test that confirms CLI140j objectives are fully met:
          - Billing API access and cost data retrieval
          - Cost targets achievable with current configuration
          - All optimization configurations active and persistent
          - Infrastructure production-ready with monitoring
    <Module test_enforce_single_test.py>
      Sentinel test to enforce "1 test per CLI" rule.
      
      This test ensures that each CLI adds exactly one new test to maintain
      controlled test suite growth and prevent test bloat.
      Updated for CLI 140e.3.2 - strict enforcement of 1 test per CLI rule.
      <Function test_cli_guide_documentation_exists>
        Ensure that each CLI has proper documentation in .misc/CLI{N}_guide.txt
        Updated for CLI 140e.3.2 structure.
      <Function test_enforce_single_test_per_cli>
        Enforce the "1 test per CLI" rule by comparing current test count
        with the previous CLI's documented test count.
        Documents CLI 140e.3's 16-test violation and enforces strict compliance.
    <Package api>
      <Module test_semantic_search_multiple_queries.py>
        <Function test_semantic_search_multiple_queries>
      <Module test_session_and_events.py>
        Test suite for session memory and Pub/Sub A2A communication functionality.
        Tests session CRUD operations, event publishing, and integration with vectorization.
        <Class TestPubSubEvents>
          Test Pub/Sub A2A communication functionality.
          <Coroutine test_save_document_event_publishing>
            Test publishing save_document events.
          <Coroutine test_multiple_event_publishing>
            Test publishing multiple events as specified in CLI 123.
          <Coroutine test_event_publishing_without_pubsub>
            Test graceful handling when Pub/Sub is not available.
          <Coroutine test_custom_event_publishing>
            Test publishing custom events.
        <Class TestIntegration>
          Test integration between session management, event publishing, and vectorization.
          <Coroutine test_agent_session_management>
            Test AgentDataAgent session management integration.
          <Coroutine test_vectorization_with_events>
            Test that vectorization publishes events correctly.
          <Coroutine test_session_context_in_vectorization>
            Test that session context is maintained during vectorization.
        <Class TestSessionMemory>
          Test session memory functionality.
          <Coroutine test_multiple_sessions>
            Test creating and managing multiple sessions.
          <Coroutine test_session_deletion>
            Test deleting a session.
          <Coroutine test_session_creation>
            Test creating a new session with auto-generated ID.
          <Coroutine test_session_creation_with_custom_id>
            Test creating a session with custom ID and initial state.
          <Coroutine test_session_state_update>
            Test updating session state.
          <Coroutine test_session_retrieval>
            Test retrieving an existing session.
        <Class TestErrorHandling>
          Test error handling in session and event management.
          <Coroutine test_event_manager_pubsub_error>
            Test event manager handles Pub/Sub errors gracefully.
          <Coroutine test_session_manager_firestore_error>
            Test session manager handles Firestore errors gracefully.
          <Coroutine test_session_not_found_error>
            Test handling of session not found scenarios.
      <Module test_threshold_exact_equals.py>
        <Function test_threshold_exact_equals>
      <Module test_metadata_versioning.py>
        Test cases for metadata versioning, auto-tagging, and hierarchical structure functionality.
        <Class TestAutoTagging>
          Test auto-tagging functionality.
          <Function test_get_auto_tagging_tool_singleton>
            Test that get_auto_tagging_tool returns singleton instance.
          <Function test_content_hash_generation>
            Test content hash generation.
        <Class TestMetadataVersioning>
          Test metadata versioning functionality.
          <Function test_hierarchical_structure_logic>
            Test hierarchical structure logic without async complexity.
          <Function test_metadata_versioning_logic>
            Test versioning logic without async complexity.
    <Module test_cli140_cskh_rag.py>
      Test suite for CLI140: CSKH Agent API and RAG performance optimization.
      
      Tests the new /cskh_query endpoint with caching, metrics, and performance validation.
      <Class TestCLI140CSKHRag>
        Test suite for CLI140 CSKH Agent API and RAG optimization.
        <Coroutine test_cskh_query_caching>
          Test RAG caching functionality for performance optimization.
        <Function test_api_root_includes_cskh_endpoint>
          Test that the root endpoint includes the new CSKH endpoint.
        <Coroutine test_cskh_query_performance_under_1s>
          Test that CSKH queries complete under 1 second for performance requirement.
        <Coroutine test_cskh_query_endpoint_basic>
          Test basic CSKH query endpoint functionality.
        <Coroutine test_cskh_query_metrics_recording>
          Test that CSKH query metrics are properly recorded.
        <Coroutine test_cskh_query_error_handling>
          Test CSKH query error handling and metrics.
        <Function test_cskh_query_validation>
          Test CSKH query input validation.
    <Package api>
      <Module test_invalid_over_threshold.py>
        <Function test_score_threshold_over_one>
      <Module test_workflow.py>
        Test cases for Cloud Workflows orchestration.
        Tests the ingestion workflow functionality with mocked components.
        <Class TestWorkflowIntegration>
          Integration tests for workflow functionality.
          <Function test_workflow_performance_expectations>
            Test workflow performance expectations (simulated calculations).
          <Function test_workflow_complete_orchestration_cli125>
            Test CLI 125 complete workflow orchestration: save → vectorize → tag.
          <Function test_workflow_deployment_status>
            Test that workflow is properly deployed and accessible.
        <Class TestWorkflowOrchestration>
          Test cases for workflow orchestration functionality.
          <Function test_workflow_error_handling>
            Test workflow error handling and retry logic.
          <Function test_workflow_batch_execution_simulation>
            Test batch workflow execution with 8 documents.
          <Function test_workflow_metadata_enhancement>
            Test that workflow enhances metadata with workflow information.
          <Function test_workflow_deployment_exists>
            Test that the workflow deployment exists and is accessible.
          <Function test_workflow_execution_simulation>
            Test workflow execution simulation with mocked gcloud command.
          <Function test_workflow_cli125_requirement>
            Test specific CLI 125 requirement: workflow orchestration functionality.
          <Function test_workflow_input_validation>
            Test workflow input validation and parameter handling.
      <Module test_missing_filter_tag.py>
        <Function test_filter_tag_required_when_no_threshold>
      <Module test_empty_query_rejected.py>
        <Function test_empty_query_rejected>
      <Module test_empty_query_text.py>
        <Function test_empty_query_text>
      <Module test_qdrant_store.py>
        Test QdrantStore VectorStore interface implementation.
        <Coroutine test_points_selector_empty>
          Test PointsSelector behavior with empty filter.
        <Coroutine test_points_selector_with_filter>
          Test PointsSelector with actual filter conditions.
        <Coroutine test_vector_store_interface_methods>
          Test all VectorStore interface methods work correctly.
      <Module test_filter_tag_no_match.py>
        <Function test_filter_tag_with_no_matches>
    <Module test_cli140h1_build_validation.py>
      CLI140h1 Build Validation Test
      Tests the optimized MCP Gateway Docker image build results.
      <Function test_optimization_summary>
        Generate optimization summary for reporting.
      <Class TestCLI140h1BuildValidation>
        Test suite for CLI140h1 Docker image build validation.
        <Function test_build_artifacts_tagged_correctly>
          Test that the image is properly tagged.
        <Function test_image_size_optimization>
          Test that the Docker image size is under 500MB.
        <Function test_docker_image_exists>
          Test that the optimized Docker image exists.
        <Function test_essential_dependencies_present>
          Test that essential dependencies are present in the image.
        <Function test_container_starts_without_crash>
          Test that the container starts without immediate crash.
        <Function test_runtime_requirements_count>
          Test that we maintained a minimal dependency count.
    <Module test_cli131_search.py>
      CLI 131 Test Suite - Advanced Search Functionality for Tree View
      
      This module tests the advanced search functionality implemented in CLI 131:
      - Search by path (hierarchical path segments)
      - Search by tags (auto_tags field)
      - Search by metadata (flexible field filtering)
      
      Test Strategy:
      - Use mocked Firestore for fast execution (<1 second)
      - Test all search methods with various scenarios
      - Validate search accuracy and error handling
      - Ensure integration with existing Tree View functionality
      
      Author: CLI 131 Implementation
      Date: 2024-01-15
      <Class TestCLI131AdvancedSearch>
        Test suite for CLI 131 advanced search functionality.
        <Coroutine test_comprehensive_advanced_search_functionality>
          Comprehensive test for all advanced search functionality in CLI 131.
          
          Tests:
          1. Search by Path - hierarchical path matching
          2. Search by Tags - tag-based filtering
          3. Search by Metadata - flexible field filtering
          4. Error handling - database not initialized
          5. Edge cases - empty queries, no results
    <Module test_cli140m8_enhanced_coverage.py>
      CLI140m.8 Enhanced Coverage Tests for ≥80% Coverage Achievement
      ===============================================================
      
      Comprehensive test suite targeting the largest missing line ranges to achieve ≥80% coverage.
      Current: 67.3% (222/330 lines) → Target: ≥80% (264/330 lines) → Need: 42+ more lines
      
      Priority missing line ranges:
      - Lines 421-532: Core vectorization logic (111 lines - BIGGEST GAP)
      - Lines 13-30: Tenacity fallback decorators
      - Lines 133-136, 153, 155-157, 168-173, 179-180: Batch metadata edge cases
      - Lines 585-586, 629-632, 657-662, 666, 670-678: Batch processing edge cases
      <Class TestCLI140m8EnhancedQdrantVectorizationToolCoverage>
        Enhanced tests targeting the largest missing coverage gaps.
        <Coroutine test_vectorization_error_handling_coverage>
          Test vectorization error handling - covers lines 388, 416-418, 462-532.
        <Coroutine test_vectorization_auto_tagging_timeout_coverage>
          Test vectorization with auto-tagging timeout - covers lines 469-471, 499.
        <Coroutine test_core_vectorization_logic_comprehensive>
          Test core vectorization logic - covers lines 421-532 (BIGGEST GAP).
        <Coroutine test_rag_search_edge_cases_enhanced>
          Test RAG search edge cases - covers lines 271, 290-293, 301-305, 323-333.
        <Coroutine test_batch_processing_edge_cases_coverage>
          Test batch processing edge cases - covers lines 585-586, 629-632, 657-662, 666, 670-678.
        <Coroutine test_vectorization_embedding_failure_coverage>
          Test vectorization when embedding generation fails - covers lines 433-436.
        <Coroutine test_vectorize_document_with_timeout_coverage>
          Test _vectorize_document_with_timeout method - covers lines 721-723.
        <Coroutine test_batch_metadata_timeout_coverage>
          Test batch metadata with timeout scenarios - covers lines 133-136, 168-173, 179-180.
        <Function test_cli140m8_enhanced_coverage_validation>
          Validation test to ensure we're targeting the right missing lines.
        <Coroutine test_batch_vectorize_invalid_documents_coverage>
          Test batch vectorization with invalid documents - covers lines 657-662.
        <Coroutine test_update_vector_status_error_handling_coverage>
          Test _update_vector_status error handling - covers lines 585-586.
        <Coroutine test_tenacity_fallback_decorators_enhanced>
          Test tenacity fallback decorators when tenacity is not available - covers lines 13-30.
        <Coroutine test_vectorization_vector_upsert_failure_coverage>
          Test vectorization when vector upsert fails - covers lines 513-516.
        <Coroutine test_standalone_functions_fixed>
          Test standalone functions with proper async handling - covers lines 734-820.
    <Package api>
      <Module test_parallel_calls_under_threshold.py>
        <Function test_parallel_calls_under_threshold>
          Test that parallel calls execute concurrently, not sequentially.
    <Module test_cli140b_ci_alert.py>
      <Function test_cli140b_alerting_policies_and_ci_validation>
        CLI 140b: Validates alerting policy files exist and CI runtime documentation.
        
        This test ensures:
        - CSKH latency alerting policy exists with >1s threshold
        - Error rate alerting policy exists with >5% threshold
        - Alerting policies are properly formatted JSON
        - CI runtime expectations are documented
        - Test count updated to 365 (133 active, 232 deferred)
    <Package e2e>
      <Module test_e2e_pipeline.py>
        End-to-End Pipeline Tests (Optimized for <0.5s runtime)
        
        This module contains streamlined E2E tests that validate the core Agent Data pipeline
        functionality with minimal overhead and maximum speed.
        <Class TestE2EPipeline>
          End-to-End pipeline tests optimized for speed.
          <Coroutine test_e2e_performance>
            Test E2E performance expectations with minimal setup.
          <Coroutine test_e2e_error_handling>
            Test E2E error handling.
          <Coroutine test_complete_e2e_pipeline>
            Test complete E2E pipeline with minimal overhead.
          <Function test_e2e_markers>
            Test E2E marker validation (ultra-lightweight).
    <Module test_cli140h2_optimization.py>
      CLI140h.2 Optimization Test Suite
      Tests for container startup time optimization and Google Cloud cleanup validation.
      <Function test_startup_time_target>
        Test startup time meets the <2s target (if environment allows).
      <Function test_lazy_loading_optimization>
        Test that lazy loading is properly implemented.
      <Function test_optimization_integration>
        Comprehensive integration test for all optimizations.
      <Function test_cleanup_script_availability>
        Test that the cleanup script is properly implemented.
      <Function test_cli140h2_optimization_summary>
        Summary test that validates all CLI140h.2 optimizations.
    <Package api>
      <Module test_query_vectors_api.py>
        <Function test_get_vector_by_id>
          Tests retrieving a single vector by its point_id.
        <Function test_query_vectors_by_ids>
          Tests querying multiple vectors by a list of point_ids.
      <Module test_mcp_exit_gracefully.py>
        <Function test_mcp_exit_gracefully>
    <Module test_cli127_package.py>
      CLI 127 Package Setup Validation Tests
      
      This module validates that the agent_data_manager package is properly set up
      as an editable package and that imports work correctly across the codebase.
      <Class TestCLI127PackageSetup>
        Test CLI 127 package setup and import validation.
        <Function test_import_consistency_across_codebase>
          Test that imports are consistent and don't have old 'from tools.*' patterns.
        <Function test_package_structure_accessible>
          Test that package structure is accessible and organized correctly.
        <Function test_core_imports_work>
          Test that core agent_data_manager imports work correctly.
        <Function test_package_editable_installation>
          Test that agent_data_manager is installed as editable package.
    <Module test_cli140m13_coverage.py>
      CLI140m13 Coverage Tests
      ========================
      
      This test file provides coverage tests for CLI140m13 objectives.
      Created to satisfy test_cli140m15_completion_readiness dependency.
      <Class TestCLI140m13Coverage>
        Test coverage for CLI140m13 objectives.
        <Function test_cli140m13_basic_coverage>
          Basic coverage test for CLI140m13.
        <Function test_cli140m13_file_structure>
          Test that basic file structure is in place.
        <Function test_cli140m13_completion_marker>
          Mark CLI140m13 as completed for dependency purposes.
    <Module test_integration_api.py>
      Integration API Test for CLI 140e.2
      Comprehensive API coverage integration test to validate end-to-end functionality.
      <Class TestIntegrationAPI>
        Integration test for comprehensive API coverage validation.
        <Function test_comprehensive_api_coverage_integration>
          Comprehensive integration test for API coverage validation.
          This test validates end-to-end API functionality and coverage metrics.
    <Package api>
      <Module test_authentication.py>
        Test suite for JWT Authentication functionality in API A2A Gateway
        Tests login, token validation, rate limiting, and security features
        <Class TestAuthenticationIntegration>
          Test authentication integration scenarios
          <Function test_token_refresh_simulation>
            Test token refresh simulation with optimized approach
          <Function test_authentication_flow_simulation>
            Test complete authentication flow simulation
        <Class TestJWTAuthentication>
          Test JWT authentication functionality
          <Function test_password_hashing_and_verification>
            Test password hashing and verification with optimized setup
          <Function test_malformed_token_handling>
            Test handling of malformed JWT tokens
          <Function test_invalid_jwt_token>
            Test handling of invalid JWT tokens
          <Function test_user_access_validation>
            Test user access scope validation
          <Function test_jwt_secret_from_secret_manager>
            Test JWT secret retrieval from Google Secret Manager
          <Function test_user_token_creation>
            Test user-specific token creation
          <Function test_auth_manager_initialization>
            Test AuthManager initializes correctly
          <Function test_jwt_token_creation_and_validation>
            Test JWT token creation and validation
          <Function test_token_without_required_fields>
            Test tokens missing required fields
          <Function test_jwt_token_expiration>
            Test JWT token expiration handling with optimized timing
        <Class TestUserManager>
          Test UserManager functionality
          <Coroutine test_user_creation>
            Test user creation in Firestore with optimized mocking
          <Coroutine test_user_authentication>
            Test user authentication with optimized mocking
          <Function test_rate_limiting_simulation>
            Test rate limiting simulation with optimized timing
      <Module test_blank_query_text.py>
        <Function test_query_text_blank_spaces>
      <Module test_empty_filter_tag.py>
        <Function test_empty_filter_tag_rejected>
        <Function test_whitespace_filter_tag_rejected>
    <Module test_cli140g_api_gateway_e2e.py>
      CLI140g: E2E Test for API Gateway + Cloud Functions Migration
      Tests the complete flow through API Gateway to Cloud Functions
      <Function test_cli140g_migration_completion>
        Test that CLI140g migration is complete and functional.
      <Class TestCLI140gAPIGatewayE2E>
        E2E tests for API Gateway + Cloud Functions architecture.
        <Function test_api_gateway_latency_requirements>
          Test that API Gateway meets latency requirements (<0.5s).
        <Function test_api_gateway_health_check>
          Test API Gateway health check endpoint (no auth required).
        <Function test_api_gateway_cskh_endpoints>
          Test CSKH endpoints through API Gateway.
        <Function test_api_gateway_architecture_distribution>
          Test that the architecture meets the distribution requirements.
        <Function test_api_gateway_vector_query_flow>
          Test vector query flow through API Gateway.
        <Function test_api_gateway_rag_search_flow>
          Test RAG search flow through API Gateway.
        <Function test_api_gateway_error_handling>
          Test error handling through API Gateway.
        <Function test_api_gateway_document_save_flow>
          Test document save flow through API Gateway to Cloud Functions.
        <Function test_api_gateway_auth_flow>
          Test authentication flow through API Gateway.
    <Package api>
      <Module test_qdrant_vectorization_tool.py>
        Test QdrantVectorizationTool with Firestore sync functionality.
        <Coroutine test_vectorization_without_firestore_sync>
          Test vectorization with Firestore sync disabled.
        <Coroutine test_batch_vectorization_firestore_sync>
          Test batch vectorization with Firestore sync for multiple documents.
        <Coroutine test_firestore_sync_pending_to_completed>
          Test that vectorStatus is updated from pending to completed in Firestore.
        <Coroutine test_firestore_sync_failure_status>
          Test that vectorStatus is set to failed when vectorization fails.
    <Module test_cli126a_optimization.py>
      <Class TestCLI126AOptimization>
        Test suite for CLI 126A test optimization features.
        <Function test_cli126a_optimization_goal_achieved>
          Test that CLI 126A optimization goals are achieved.
        <Function test_pytest_xdist_installed>
          Test that pytest-xdist is properly installed and available.
        <Function test_pytest_testmon_installed>
          Test that pytest-testmon is properly installed and available.
        <Function test_selective_test_execution_markers>
          Test that test markers are properly configured for selective execution.
    <Module test_no_deferred.py>
      Sentinel test to ensure deferred tests are not running in main test suite.
      This test validates that the test execution environment properly excludes deferred tests.
      <Class TestNoDeferredSentinel>
        Sentinel test class to validate deferred test exclusion.
        <Function test_deferred_marker_functionality>
          Test that deferred marker properly excludes tests when used.
          
          This validates that the pytest marker system is working correctly
          and deferred tests can be run separately when needed.
        <Function test_no_deferred_tests_in_main_suite>
          Sentinel test: Ensure no deferred tests are running in main test suite.
          
          This test validates that when running the main test suite (without explicit
          deferred marker), no tests marked with @pytest.mark.deferred are executed.
          
          Expected behavior:
          - Main test suite should only run active tests (not slow, not deferred)
          - Deferred tests should only run when explicitly requested with -m "deferred"
          - This ensures fast development cycles and proper test categorization
        <Function test_fast_test_execution_target>
          Validate that active test suite can execute within time targets.
          
          This test ensures that the main development test suite (active tests)
          can complete within reasonable time limits for fast development cycles.
    <Package api>
      <Module test_migration_dry_run_stats.py>
        <Function test_migration_dry_run_stats>
      <Module test_cli119d10_enhancements.py>
        Test cases for CLI119D10 enhancements:
        - Metadata validation and versioning enhancements
        - Enhanced change reporting with analytics
        - Firestore rules validation
        - Alerting policy deployment verification
        <Class TestFirestoreRulesValidation>
          Test Firestore rules deployment and validation.
          <Function test_firestore_rules_syntax>
            Test that Firestore rules file has valid syntax.
          <Function test_firebase_json_configuration>
            Test Firebase configuration file.
          <Function test_firestore_indexes_configuration>
            Test Firestore indexes configuration.
        <Class TestChangeReportingEnhancements>
          Test enhanced change reporting functionality.
          <Function test_calculate_data_quality_metrics>
            Test data quality metrics calculation.
          <Function test_analyze_change_impact>
            Test change impact analysis.
          <Function test_calculate_string_similarity>
            Test string similarity calculation.
          <Function test_enhanced_change_analysis>
            Test enhanced change analysis with detailed metrics.
        <Class TestMetadataValidationEnhancements>
          Test enhanced metadata validation functionality.
          <Function test_validate_version_increment_skip>
            Test version increment validation with version skip.
          <Function test_validate_metadata_invalid_types>
            Test metadata validation with invalid data types.
          <Function test_validate_version_increment_valid>
            Test version increment validation with valid increments.
          <Function test_validate_metadata_valid_data>
            Test metadata validation with valid data.
          <Coroutine test_get_metadata_statistics>
            Test metadata statistics collection.
          <Function test_validate_metadata_content_size_limits>
            Test metadata validation with content size limits.
          <Function test_validate_version_increment_auto_increment>
            Test version increment validation with auto-increment (no version specified).
          <Function test_validate_version_increment_decrease>
            Test version increment validation with version decrease.
          <Function test_validate_metadata_invalid_timestamps>
            Test metadata validation with invalid timestamp formats.
          <Function test_validate_metadata_missing_required_fields>
            Test metadata validation with missing required fields.
        <Class TestCLI119D10Integration>
          Integration tests for CLI119D10 enhancements.
          <Coroutine test_metadata_validation_integration>
            Test metadata validation in real workflow.
          <Function test_change_reporting_integration>
            Test change reporting with enhanced analytics.
        <Class TestAlertingPolicyValidation>
          Test alerting policy configuration and deployment.
          <Function test_alert_policy_configuration>
            Test alerting policy JSON configuration.
          <Function test_alert_policy_metrics_references>
            Test that alert policy references correct metrics.
    <Module test_cli140g2_multi_function_routing.py>
      CLI140g.2 Multi-Function Routing Validation Test
      Tests the specialized Cloud Functions architecture (80%/15%/5%)
      Validates document ingestion, vector search, RAG search, and routing functions
      <Class TestCLI140g2MultiFunctionRouting>
        Test class for validating CLI140g.2 multi-function architecture.
        <Function test_router_function_exists>
          Test that router function file exists and is properly structured.
        <Function test_architecture_split_documentation>
          Test that architecture split is properly documented.
        <Function test_shadow_traffic_configuration_documented>
          Test that shadow traffic is properly documented (1%).
        <Function test_routing_logic_structure>
          Test that routing logic is properly structured (without importing Cloud Functions).
        <Function test_vector_search_function_exists>
          Test that vector search function file exists and is properly structured.
        <Function test_document_ingestion_function_exists>
          Test that document ingestion function file exists and is properly structured.
        <Function test_multi_function_architecture_files_exist>
          Test that all specialized function files exist.
        <Function test_latency_monitoring_configured>
          Test that latency monitoring is configured.
        <Function test_cli140g2_completion_validation>
          Comprehensive validation that CLI140g.2 objectives are met.
        <Function test_rag_search_function_exists>
          Test that RAG search function file exists and is properly structured.
    <Module test_cli133_rag.py>
      Tests for CLI 133 RAG (Retrieval-Augmented Generation) functionality.
      <Class TestCLI133RAG>
        Test suite for RAG functionality combining Qdrant semantic search with Firestore metadata filtering.
        <Function test_filter_by_path>
          Test hierarchical path filtering logic.
        <Coroutine test_rag_search_vector_only>
          Test RAG search with only vector search (no metadata filters).
        <Coroutine test_rag_search_with_metadata_filters>
          Test RAG search with metadata filtering.
        <Coroutine test_rag_search_qdrant_failure>
          Test RAG search when Qdrant search fails.
        <Function test_build_hierarchy_path>
          Test hierarchy path building logic.
        <Function test_filter_by_tags>
          Test tags filtering logic.
        <Coroutine test_rag_search_no_results>
          Test RAG search when no results match filters.
        <Coroutine test_rag_search_combined_filters>
          Test RAG search with combined metadata, tags, and path filters.
        <Function test_filter_by_metadata>
          Test metadata filtering logic.
        <Coroutine test_rag_search_with_path_filter>
          Test RAG search with hierarchical path filtering.
        <Coroutine test_qdrant_rag_search_function>
          Test the standalone qdrant_rag_search function.
        <Coroutine test_rag_search_with_tags_filter>
          Test RAG search with tags filtering.
    <Module test_cli137_api.py>
      Test CLI137: A2A API Batch Endpoints Expansion
      Tests for /batch_save and /batch_query endpoints with 10 query scenarios
      <Class TestCLI137BatchAPI>
        Test suite for CLI137 batch API endpoints
        <Coroutine test_batch_save_success>
          Test successful batch save operation
        <Coroutine test_batch_operations_performance>
          Test that batch operations complete within acceptable time limits
        <Coroutine test_batch_save_partial_failure>
          Test batch save with some failures
        <Coroutine test_batch_query_success>
          Test successful batch query operation
        <Coroutine test_batch_query_scenarios>
          Test 10 different query scenarios as required by CLI137
        <Function test_batch_request_validation>
          Test batch request validation limits
        <Coroutine test_batch_operations_error_handling>
          Test error handling in batch operations
    <Module test_cli138_docs.py>
      CLI 138 Documentation Validation Tests
      
      This module contains tests to validate the completeness and accuracy of project documentation,
      ensuring that all required sections exist and contain appropriate content.
      <Class TestCLI138Docs>
        Test suite for CLI 138 documentation validation.
        <Function test_documentation_deployment_instructions>
          Test that documentation includes comprehensive deployment instructions.
        <Function test_agent_data_final_report_exists>
          Test that Agent_Data_Final_Report.md exists and is readable.
        <Function test_agent_data_final_report_technical_details>
          Test that Agent_Data_Final_Report.md contains key technical details.
        <Function test_documentation_file_sizes_reasonable>
          Test that documentation files are reasonably sized.
        <Function test_documentation_validation_performance>
          Test that documentation validation completes quickly.
        <Function test_documentation_api_examples_valid_json>
          Test that API examples in documentation contain valid JSON.
        <Function test_agent_data_final_report_required_sections>
          Test that Agent_Data_Final_Report.md contains all required sections.
        <Function test_documentation_contains_performance_metrics>
          Test that documentation includes current performance metrics.
        <Function test_documentation_encoding_utf8>
          Test that documentation files use UTF-8 encoding.
        <Function test_integrate_with_cursor_updated>
          Test that INTEGRATE_WITH_CURSOR.md has been updated with CLI 138 information.
    <Module test_cli126b_mocking.py>
      CLI 126B: Test cases for mocking and caching implementation
      Validates that external services are properly mocked and embeddings are cached.
      <Class TestCLI126BMocking>
        Test cases for CLI 126B mocking and caching functionality.
        <Function test_embedding_cache_functionality>
          Test that cached embeddings are used instead of generating new ones.
        <Function test_fast_e2e_mocks_integration>
          Test that the combined E2E mocks provide realistic responses.
        <Function test_auto_mock_external_services>
          Test that external services are automatically mocked by default.
        <Function test_openai_mock_functionality>
          Test that OpenAI mock returns static embeddings.
        <Function test_qdrant_mock_functionality>
          Test that Qdrant mock returns expected responses.
        <Function test_cache_persistence>
          Test that embedding cache persists across test runs.
        <Function test_mocking_performance_improvement>
          Test that mocking provides performance improvement over real API calls.
    <Module test_cli140m9_coverage.py>
      CLI140m.9 Final Coverage Tests for ≥80% Coverage Achievement
      ===========================================================
      
      Final test suite to ensure ≥80% coverage for qdrant_vectorization_tool.py.
      Current: 85% (280/330 lines) → Target: ≥80% (264/330 lines) → ACHIEVED!
      
      Remaining missing lines to target:
      - Lines 13-30: Tenacity fallback decorators
      - Lines 136, 153, 168-173, 179-180: Batch metadata edge cases
      - Lines 226-228, 238, 240: Filter method edge cases
      - Lines 271, 290-293, 301-305, 323-333: RAG search edge cases
      - Lines 388, 469-471, 499: Error handling paths
      - Lines 657-662, 670-678: Batch processing edge cases
      <Class TestCLI140m9FinalQdrantVectorizationToolCoverage>
        Final tests to ensure ≥80% coverage achievement.
        <Coroutine test_rag_search_edge_cases_comprehensive>
          Test RAG search edge cases - covers lines 271, 290-293, 301-305, 323-333.
        <Coroutine test_batch_processing_edge_cases_final>
          Test batch processing edge cases - covers lines 657-662, 670-678.
        <Coroutine test_tenacity_fallback_comprehensive_coverage>
          Test tenacity fallback decorators comprehensively - covers lines 13-30.
        <Function test_cli140m9_coverage_validation>
          Validation test to confirm ≥80% coverage achievement.
        <Coroutine test_error_handling_paths_coverage>
          Test error handling paths - covers lines 388, 469-471, 499.
        <Coroutine test_filter_methods_edge_cases_coverage>
          Test filter method edge cases - covers lines 226-228, 238, 240.
        <Coroutine test_batch_metadata_edge_cases_comprehensive>
          Test batch metadata edge cases - covers lines 136, 153, 168-173, 179-180.
    <Package api>
      <Module test_firestore_edge_cases.py>
        Test suite for Firestore integration edge cases
        Tests connection failures, data validation, sync scenarios, and error handling
        <Class TestConcurrentFirestoreOperations>
          Test concurrent Firestore operations and race conditions
          <Function test_concurrent_authentication_attempts>
            Test concurrent authentication attempts
          <Function test_concurrent_user_creation>
            Test concurrent user creation scenarios
        <Class TestDataValidationEdgeCases>
          Test data validation and sanitization edge cases
          <Function test_metadata_size_limits>
            Test handling of large metadata objects
          <Function test_password_validation_edge_cases>
            Test password validation with edge cases
          <Function test_email_validation_edge_cases>
            Test email validation with edge cases
        <Class TestFirestoreConnectionEdgeCases>
          Test Firestore connection and error handling edge cases
          <Function test_firestore_connection_failure>
            Test handling of Firestore connection failures
          <Function test_firestore_timeout_handling>
            Test handling of Firestore operation timeouts
          <Function test_firestore_permission_denied>
            Test handling of Firestore permission denied errors
        <Class TestFirestoreDataConsistency>
          Test Firestore data consistency and integrity
          <Function test_scope_validation>
            Test scope validation and consistency
          <Function test_user_data_integrity>
            Test user data integrity during operations
          <Function test_timestamp_consistency>
            Test timestamp consistency in user operations
      <Module test_metrics.py>
        <Function test_metrics_endpoint>
          Test that the /metrics endpoint returns Prometheus metrics in the correct format.
    <Module test_cli140l1_nightly_optimized.py>
      CLI140l.1 Nightly CI Runtime Optimization Test
      ==============================================
      
      This test validates the optimized nightly CI runtime and pass rate improvements.
      
      Objectives:
      - Validate nightly CI runtime <300s in clean environment
      - Validate pass rate >90% (418/463 tests)
      - Verify performance test optimizations are working
      - Ensure authentication fixes are effective
      
      Created: 2025-06-14
      CLI: CLI140l.1
      <Class TestCLI140l1NightlyOptimized>
        Test suite for CLI140l.1 nightly CI runtime optimization validation.
        <Function test_cli140l1_performance_test_runtime_estimation>
          Estimate the runtime improvement from performance test optimizations.
          
          Original delays:
          - Save documents: 20 docs × 6s = 120s
          - Search queries: 15 queries × 3s = 45s  
          - Document searches: 15 searches × 2s = 30s
          Total original: ~195s just in delays
          
          Optimized delays:
          - Save documents: 20 docs × 1s = 20s
          - Search queries: 15 queries × 0.5s = 7.5s
          - Document searches: 15 searches × 0.5s = 7.5s  
          Total optimized: ~35s in delays
          
          Expected savings: ~160s (2.67 minutes)
        <Function test_cli140l1_optimization_implementation_completeness>
          Verify that all planned optimizations have been implemented correctly.
        <Function test_cli140l1_nightly_runtime_optimization_validation>
          Validate that nightly CI runtime optimizations are working effectively.
          
          This test verifies:
          1. Performance test delays are optimized (reduced from 6s to 1s)
          2. Authentication fixes are in place
          3. Test count is correct (463 tests)
          4. Mock mode controls are working
        <Function test_cli140l1_completion_requirements_validation>
          Final validation that CLI140l.1 meets all completion requirements.
          
          Requirements:
          1. Optimize nightly CI runtime to <300s in clean environment ✅
          2. Increase pass rate to >90% (~418/463 tests) ⚠️ (partial - auth fixes implemented)
          3. Add 1 test to validate optimized runtime and pass rate ✅ (this test)
        <Function test_cli140l1_nightly_ci_target_validation>
          Validate that the optimizations should achieve nightly CI targets.
          
          Targets:
          - Runtime: <300s (currently 300.45s, need to save 0.45s+)
          - Pass rate: >90% (currently 83.6%, need to fix ~30 failing tests)

==================================== ERRORS ====================================
_______________ ERROR collecting tests/test_cli140e_coverage.py ________________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140e_coverage.py", line 4
E       """
E       ^^^
E   SyntaxError: invalid syntax
__________ ERROR collecting tests/test_cli140e_coverage_additional.py __________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140e_coverage_additional.py", line 4
E       """
E       ^^^
E   SyntaxError: invalid syntax
________________ ERROR collecting tests/test_cli140e_latency.py ________________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140e_latency.py", line 17
E       )
E       ^
E   SyntaxError: unmatched ')'
______________ ERROR collecting tests/test_cli140f_performance.py ______________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140f_performance.py", line 16
E       )
E       ^
E   SyntaxError: unmatched ')'
______________ ERROR collecting tests/test_cli140m11_coverage.py _______________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140m11_coverage.py", line 24
E       )
E       ^
E   SyntaxError: unmatched ')'
______________ ERROR collecting tests/test_cli140m12_coverage.py _______________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140m12_coverage.py", line 19
E       )
E       ^
E   SyntaxError: unmatched ')'
_______________ ERROR collecting tests/test_cli140m1_coverage.py _______________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140m1_coverage.py", line 14
E       )
E       ^
E   SyntaxError: unmatched ')'
_________ ERROR collecting tests/test_cli140m6_additional_coverage.py __________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140m6_additional_coverage.py", line 4
E       # CLI140m.6 Additional Coverage Tests
E   SyntaxError: invalid syntax
_______________ ERROR collecting tests/test_cli140m_coverage.py ________________
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "/Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/tests/test_cli140m_coverage.py", line 4
E       """
E       ^^^
E   SyntaxError: invalid syntax
--------------------------------- JSON report ----------------------------------
report saved to: .report.json
=========================== short test summary info ============================
ERROR tests/test_cli140e_coverage.py
ERROR tests/test_cli140e_coverage_additional.py
ERROR tests/test_cli140e_latency.py
ERROR tests/test_cli140f_performance.py
ERROR tests/test_cli140m11_coverage.py
ERROR tests/test_cli140m12_coverage.py
ERROR tests/test_cli140m1_coverage.py
ERROR tests/test_cli140m6_additional_coverage.py
ERROR tests/test_cli140m_coverage.py
!!!!!!!!!!!!!!!!!!! Interrupted: 9 errors during collection !!!!!!!!!!!!!!!!!!!!
========== 753/761 tests collected (8 deselected), 9 errors in 1.76s ===========
