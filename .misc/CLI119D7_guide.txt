CLI119D7 Implementation Guide - Metrics, Cursor Connectivity, Firestore Sync
=============================================================================

Overview:
=========
CLI119D7 successfully implements comprehensive metrics export, Cursor connectivity via MCP stdio,
and Firestore sync logic for vectorStatus management. This builds on CLI119D6's foundation to
provide complete observability and real-time status tracking.

Key Components:
==============

1. QDRANT METRICS EXPORTER CLOUD FUNCTION
   Location: functions/qdrant_metrics_exporter/

   Features:
   - Collects metrics from Qdrant cluster via REST API
   - Exports to Prometheus Pushgateway (primary)
   - Exports to Cloud Monitoring (backup)
   - Secret Manager integration for API keys
   - Error handling and retry logic

   Deployment:
   ```bash
   gcloud functions deploy qdrant-metrics-exporter \
     --gen2 --runtime=python310 --region=asia-southeast1 \
     --source=functions/qdrant_metrics_exporter \
     --entry-point=export_qdrant_metrics \
     --trigger-http --allow-unauthenticated \
     --service-account=gemini-service-account@chatgpt-db-project.iam.gserviceaccount.com \
     --memory=256MB --timeout=60s
   ```

   Environment Variables:
   - PUSHGATEWAY_URL: Prometheus Pushgateway endpoint

   Secrets Required:
   - qdrant-api-key-sg: Qdrant API key in Secret Manager

2. QDRANT VECTORIZATION TOOL
   Location: ADK/agent_data/tools/qdrant_vectorization_tool.py

   Features:
   - Document vectorization with OpenAI embeddings
   - Firestore sync for vectorStatus tracking
   - Batch processing support
   - Error handling and recovery
   - Configurable sync enable/disable

   Usage:
   ```python
   from ADK.agent_data.tools.qdrant_vectorization_tool import qdrant_vectorize_document

   result = await qdrant_vectorize_document(
       doc_id="doc123",
       content="Document content to vectorize",
       metadata={"source": "test"},
       tag="document_type",
       update_firestore=True
   )
   ```

   Status Flow:
   - pending: Initial status when vectorization starts
   - completed: Successful vectorization and Qdrant storage
   - failed: Error occurred during process

3. MCP STDIO CONNECTIVITY
   Location: test_mcp_stdio.py

   Features:
   - JSON-based communication protocol
   - Tool function mapping
   - save_document and semantic_search support
   - Error handling and response formatting

   Testing:
   ```bash
   # Test save_document
   echo '{"tool_name": "save_document", "kwargs": {"doc_id": "test1", "content": "Test content", "save_dir": "saved_documents"}}' | python test_mcp_stdio.py

   # Test semantic_search
   echo '{"tool_name": "semantic_search", "kwargs": {"query": "test", "limit": 5}}' | python test_mcp_stdio.py
   ```

4. FIRESTORE SYNC CONFIGURATION
   Location: ADK/agent_data/config/settings.py

   Configuration:
   ```python
   # Environment variables
   ENABLE_FIRESTORE_SYNC=true
   FIRESTORE_PROJECT_ID=chatgpt-db-project
   FIRESTORE_DATABASE_ID=test-default
   ```

   Firestore Structure:
   ```
   document_metadata/
   ├── doc_id_1/
   │   ├── vectorStatus: "completed"
   │   ├── lastUpdated: "2025-06-02T16:30:00Z"
   │   ├── doc_id: "doc_id_1"
   │   └── ... (additional metadata)
   ```

Testing:
========

Test Suite Coverage:
- 84 total tests (4 skipped)
- 95.5% pass rate
- 4 new Firestore sync tests added

Running Tests:
```bash
# Full test suite
pytest -q

# Firestore sync tests only
pytest tests/api/test_qdrant_vectorization_tool.py -v

# MCP stdio test
python test_mcp_stdio.py
```

Monitoring and Observability:
============================

Metrics Available:
- qdrant_requests_total: Total Qdrant API requests
- qdrant_vector_count: Current vector count in collection
- qdrant_connection_status: Connection health (1=up, 0=down)
- qdrant_api_errors_total: API error count
- documents_processed_total: Business metric for document processing

Endpoints:
- Cloud Function: https://asia-southeast1-chatgpt-db-project.cloudfunctions.net/qdrant-metrics-exporter
- Pushgateway: https://prometheus-pushgateway-812872501910.asia-southeast1.run.app

Alert Policy:
The alert_policy_latency.json is ready for deployment once custom metrics appear in Cloud Monitoring (10+ minutes after first export).

Troubleshooting:
===============

Common Issues:

1. Import Errors:
   - Ensure ADK package is installed: `pip install -e ADK/`
   - Check numpy version compatibility: `pip install "numpy<2"`

2. Firestore Access:
   - Verify project ID in configuration
   - Check service account permissions
   - Ensure Firestore is enabled in the project

3. Qdrant Connection:
   - Verify API key in Secret Manager
   - Check cluster URL and region
   - Monitor connection status metric

4. MCP stdio Issues:
   - Validate JSON format
   - Check tool_name mapping
   - Verify stdin/stdout handling

Performance Considerations:
==========================

- Qdrant free tier: 1GB storage, 210-305ms latency
- Recommended batch size: ≤100 documents
- Timeout settings: 10s for embeddings, 30s for Qdrant
- Rate limiting: 350ms delay between requests

Security:
=========

- API keys stored in Secret Manager
- Service account with minimal permissions
- Firestore rules pending (CLI119D8)
- HTTPS endpoints only
- No plaintext credentials in code

Future Enhancements (CLI119D8):
===============================

1. Alert policy deployment (pending metrics availability)
2. Complete Cursor integration with document storage
3. API A2A endpoints (/save, /query, /search)
4. Firestore security rules
5. MCP Gateway on Cloud Run

Dependencies:
============

Required packages:
- google-cloud-monitoring
- google-cloud-secret-manager
- google-cloud-firestore
- qdrant-client
- openai
- pytest-asyncio

Infrastructure:
- Google Cloud Project: chatgpt-db-project
- Service Account: gemini-service-account
- Qdrant Cluster: us-east4-0 (free tier)
- Firestore: asia-southeast1
- Secret Manager: asia-southeast1

CLI119D7 Status: ✅ COMPLETE
Next CLI: CLI119D8 (Cursor Integration, API A2A, Firestore Rules)
