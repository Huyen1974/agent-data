============================= test session starts ==============================
platform darwin -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents
configfile: pytest.ini
plugins: anyio-4.9.0, langsmith-0.3.42, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 42 items

ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_auto_embed PASSED [  2%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_with_vector_data PASSED [  4%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_no_text_field_and_no_vector_data PASSED [  7%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_text_field_not_in_metadata PASSED [  9%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_vector_data_mismatch_metadata_length PASSED [ 11%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_vector_data_dimension_mismatch_faiss_init PASSED [ 14%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_metadata_empty PASSED [ 16%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_openai_embedding_fails PASSED [ 19%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_invalid_vector_data_type PASSED [ 21%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_gcs_upload_meta_fails PASSED [ 23%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_firestore_set_different_error PASSED [ 26%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_meta_pickling_error PASSED [ 28%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_faiss_write_io_error PASSED [ 30%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_gcs_upload_service_unavailable PASSED [ 33%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_gcs_upload_faiss_fails PASSED [ 35%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_firestore_set_error_on_pending PASSED [ 38%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestSaveMetadataToFaiss::test_save_missing_text_field_for_embedding PASSED [ 40%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_success PASSED [ 42%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_firestore_doc_not_found PASSED [ 45%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_firestore_missing_gcs_meta_path PASSED [ 47%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_firestore_status_not_completed PASSED [ 50%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_invalid_gcs_meta_path_format PASSED [ 52%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestLoadMetadataFromFaiss::test_load_gcs_meta_download_fails PASSED [ 54%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_success PASSED [ 57%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_firestore_doc_not_found PASSED [ 59%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_embedding_fails PASSED [ 61%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_faiss_read_fails PASSED [ 64%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_faiss_search_fails PASSED [ 66%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_dimension_mismatch_faiss_vs_query FAILED [ 69%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_empty_faiss_index PASSED [ 71%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_firestore_missing_dimension FAILED [ 73%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_gcs_download_service_unavailable PASSED [ 76%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_meta_pickle_unpickling_error PASSED [ 78%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_firestore_missing_dimension_internal FAILED [ 80%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_gcs_download_service_unavailable_internal PASSED [ 83%]
ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_meta_pickle_unpickling_error_internal PASSED [ 85%]
ADK/agent_data/tests/tools/test_faiss_tools.py::test_create_local_temp_path_secure PASSED [ 88%]
ADK/agent_data/tests/tools/test_faiss_tools.py::test_create_local_temp_path_invalid_chars PASSED [ 90%]
ADK/agent_data/tests/tools/test_faiss_tools.py::test_parse_gcs_path_success PASSED [ 92%]
ADK/agent_data/tests/tools/test_faiss_tools.py::test_parse_gcs_path_no_prefix PASSED [ 95%]
ADK/agent_data/tests/tools/test_faiss_tools.py::test_parse_gcs_path_no_blob PASSED [ 97%]
ADK/agent_data/tests/tools/test_faiss_tools.py::test_parse_gcs_path_empty PASSED [100%]

=================================== FAILURES ===================================
_____ TestQueryMetadataFaiss.test_query_dimension_mismatch_faiss_vs_query ______

self = <test_faiss_tools.TestQueryMetadataFaiss object at 0x10979b250>
mock_get_openai_embedding_in_tool = <MagicMock name='get_openai_embedding' id='4632924448'>
mock_os_remove = <MagicMock name='load' id='4632927424'>
mock_os_path_exists = <MagicMock name='remove' id='4633019296'>
mock_open_in_tool = <MagicMock name='exists' id='4633027552'>
mock_pickle_load_func = <MagicMock name='open' id='4633549824'>
mock_faiss_read_index_func = <MagicMock name='read_index' id='4633557936'>
mock_download_gcs_func = <MagicMock name='_download_gcs_file' id='4633477616'>
query_common_mocks = (<MagicMock spec='AgentDataAgent' id='4633181056'>, <MagicMock name='firestore_client_instance' id='4636223728'>, <Mag..., <MagicMock name='document_snapshot' id='4636690944'>, <MagicMock name='gcs_storage_client_instance' id='4636506000'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x11436da80>

    @patch(DOWNLOAD_GCS_QUERY_PATH)
    @patch(FAISS_READ_INDEX_QUERY_PATH)
    @patch(OPEN_QUERY_PATH)
    @patch(OS_PATH_EXISTS_QUERY_PATH)
    @patch(OS_REMOVE_QUERY_PATH)
    @patch(PICKLE_LOAD_QUERY_PATH)
    @patch(f"{QUERY_TOOL_MODULE_PATH}.get_openai_embedding")
    @pytest.mark.asyncio
    async def test_query_dimension_mismatch_faiss_vs_query(self, mock_get_openai_embedding_in_tool,
                                                            mock_os_remove, mock_os_path_exists, mock_open_in_tool,
                                                            mock_pickle_load_func,
                                                            mock_faiss_read_index_func,
                                                            mock_download_gcs_func, query_common_mocks, mocker):
        from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss
        mock_agent_context, _, _, mock_fs_doc_snapshot, _ = query_common_mocks
    
        def os_exists_side_effect_for_dim_mismatch(path):
            return path in ["/tmp/q_dim_mismatch.faiss", "/tmp/q_dim_mismatch.meta"]
        mock_os_path_exists.side_effect = os_exists_side_effect_for_dim_mismatch
    
        mock_download_gcs_func.return_value = None
        mock_meta_file_stream = MagicMock(name="meta_stream")
        mock_open_in_tool.return_value.__enter__.return_value = mock_meta_file_stream
        mock_pickle_load_func.return_value = {"ids": ["id1"], "metadata": {"id1":{}}}
        mock_faiss_index_instance = MagicMock(spec=faiss.Index); mock_faiss_index_instance.d = 3; mock_faiss_index_instance.ntotal = 1
        mock_faiss_read_index_func.return_value = mock_faiss_index_instance
        # CORRECTED MOCKING FOR get_openai_embedding
        async def mock_embed_dim_mismatch(*args, **kwargs):
            return {"embedding": [0.1,0.2,0.3,0.4,0.5], "total_tokens": 5, "model_used": "mock_model_dim_mismatch"} # 5D embedding
        mock_get_openai_embedding_in_tool.side_effect = mock_embed_dim_mismatch
        result = await query_metadata_faiss(agent_context=mock_agent_context, index_name="q_dim_mismatch", key="any", top_k=1)
        assert result.get("meta", {}).get("status") == "error"
>       assert result.get("meta", {}).get("error_type") == "FaissDimensionMismatchError"
E       AssertionError: assert 'AttributeError' == 'FaissDimensionMismatchError'
E         
E         - FaissDimensionMismatchError
E         + AttributeError

ADK/agent_data/tests/tools/test_faiss_tools.py:940: AssertionError
________ TestQueryMetadataFaiss.test_query_firestore_missing_dimension _________

self = <test_faiss_tools.TestQueryMetadataFaiss object at 0x10979b910>
query_common_mocks = (<MagicMock spec='AgentDataAgent' id='4635609024'>, <MagicMock name='firestore_client_instance' id='4634910176'>, <Mag..., <MagicMock name='document_snapshot' id='4635641360'>, <MagicMock name='gcs_storage_client_instance' id='4632518928'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x114495750>

    @pytest.mark.asyncio
    async def test_query_firestore_missing_dimension(self, query_common_mocks, mocker):
        from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss
        mock_agent_context, _, _, mock_fs_doc_snapshot, _ = query_common_mocks
        mock_fs_doc_snapshot.exists = True
        mock_fs_doc_snapshot.to_dict.return_value = {
            "vectorStatus": "completed",
            "gcs_faiss_path": "gs://test-bucket/q_idx_no_dim.faiss",
            "gcs_meta_path": "gs://test-bucket/q_idx_no_dim.meta"
        }
    
        # Mock the embedding generation to return a valid embedding
        mocker.patch(f"{QUERY_TOOL_MODULE_PATH}.get_openai_embedding", return_value={
            "embedding": [0.1, 0.2, 0.3],
            "total_tokens": 3,
            "model_used": "mock_model"
        })
    
        # Mock query_metadata_faiss_internal to return a sync result
        mock_result = {
            "results": [],
            "meta": {
                "status": "error",
                "error_type": "MissingDimensionError",
                "message": "dimension not found in Firestore"
            }
        }
        mocker.patch(f"{QUERY_TOOL_MODULE_PATH}.query_metadata_faiss_internal", return_value=mock_result)
    
        result = await query_metadata_faiss(agent_context=mock_agent_context, index_name="q_idx_no_dim", key="any", top_k=1)
        assert result.get("meta", {}).get("status") == "error"
>       assert result.get("meta", {}).get("error_type") == "MissingDimensionError"
E       AssertionError: assert 'TypeError' == 'MissingDimensionError'
E         
E         - MissingDimensionError
E         + TypeError

ADK/agent_data/tests/tools/test_faiss_tools.py:1020: AssertionError
____ TestQueryMetadataFaiss.test_query_firestore_missing_dimension_internal ____

self = <test_faiss_tools.TestQueryMetadataFaiss object at 0x10979b430>
mock_get_openai_embedding_in_tool = <MagicMock name='get_openai_embedding' id='4660152016'>
mock_os_remove = <MagicMock name='remove' id='4660165888'>
mock_os_path_exists = <MagicMock name='exists' id='4660740352'>
mock_open_in_tool = <MagicMock name='open' id='4660747216'>
mock_faiss_read_index_func = <MagicMock name='read_index' id='4635601280'>
mock_pickle_load_func = <MagicMock name='load' id='4660217024'>
mock_download_gcs_func = <MagicMock name='_download_gcs_file' id='4660783920'>
query_common_mocks = (<MagicMock spec='AgentDataAgent' id='4660164592'>, <MagicMock name='firestore_client_instance' id='4634597248'>, <Mag..., <MagicMock name='document_snapshot' id='4633084736'>, <MagicMock name='gcs_storage_client_instance' id='4659084736'>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x115d0aad0>

    @patch(DOWNLOAD_GCS_QUERY_PATH)
    @patch(PICKLE_LOAD_QUERY_PATH)
    @patch(FAISS_READ_INDEX_QUERY_PATH)
    @patch(OPEN_QUERY_PATH)
    @patch(OS_PATH_EXISTS_QUERY_PATH)
    @patch(OS_REMOVE_QUERY_PATH)
    @patch(f"{QUERY_TOOL_MODULE_PATH}.get_openai_embedding")
    @pytest.mark.asyncio
    async def test_query_firestore_missing_dimension_internal(self, mock_get_openai_embedding_in_tool,
                                                             mock_os_remove, mock_os_path_exists, mock_open_in_tool,
                                                             mock_faiss_read_index_func, mock_pickle_load_func,
                                                             mock_download_gcs_func, query_common_mocks, mocker):
        from ADK.agent_data.tools.query_metadata_faiss_tool import query_metadata_faiss
        mock_agent_context, _, _, mock_fs_doc_snapshot, _ = query_common_mocks
        mock_fs_doc_snapshot.exists = True
        mock_fs_doc_snapshot.to_dict.return_value = {
            "vectorStatus": "completed",
            "gcs_faiss_path": "gs://test-bucket/q_idx_no_dim.faiss",
            "gcs_meta_path": "gs://test-bucket/q_idx_no_dim.meta"
            # Intentionally missing dimension field
        }
    
        async def mock_embedding_side_effect(agent_context, text_to_embed):
            return {"embedding": [0.1, 0.2, 0.3], "total_tokens": 3, "model_used": "mock_model"}
        mock_get_openai_embedding_in_tool.side_effect = mock_embedding_side_effect
    
        def os_exists_side_effect(path):
            return False
        mock_os_path_exists.side_effect = os_exists_side_effect
    
        mock_download_gcs_func.return_value = None
        mock_faiss_index_instance = MagicMock(spec=faiss.Index)
        mock_faiss_index_instance.d = 3
        mock_faiss_index_instance.ntotal = 1
        mock_faiss_read_index_func.return_value = mock_faiss_index_instance
    
        result = await query_metadata_faiss(agent_context=mock_agent_context, index_name="q_idx_no_dim", key="any", top_k=1)
        assert result.get("meta", {}).get("status") == "error"
>       assert result.get("meta", {}).get("error_type") == "MissingDimensionError"
E       AssertionError: assert 'ValueError' == 'MissingDimensionError'
E         
E         - MissingDimensionError
E         + ValueError

ADK/agent_data/tests/tools/test_faiss_tools.py:1134: AssertionError
=============================== warnings summary ===============================
setup/venv/lib/python3.10/site-packages/faiss/loader.py:49
  /Users/nmhuyen/Documents/Manual Deploy/mpc_back_end_for_agents/setup/venv/lib/python3.10/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.
    from numpy.core._multiarray_umath import __cpu_features__

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type SwigPyPacked has no __module__ attribute

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type SwigPyObject has no __module__ attribute

<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: DeprecationWarning: builtin type swigvarlink has no __module__ attribute

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_dimension_mismatch_faiss_vs_query
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_firestore_missing_dimension
FAILED ADK/agent_data/tests/tools/test_faiss_tools.py::TestQueryMetadataFaiss::test_query_firestore_missing_dimension_internal
=================== 3 failed, 39 passed, 4 warnings in 4.88s ===================
